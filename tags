!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AAAAA	code/HelloWorld.c	21;"	d	file:
ALIGNMENT_H	src/alignment.h	2;"	d
ALLOC	src/xfunc.h	4;"	d
ANDAND	parser.tab.c	/^    ANDAND = 286,$/;"	e	enum:yytokentype	file:
ANDAND	parser.tab.h	/^    ANDAND = 286,$/;"	e	enum:yytokentype
AND_EQ	parser.tab.c	/^    AND_EQ = 300,$/;"	e	enum:yytokentype	file:
AND_EQ	parser.tab.h	/^    AND_EQ = 300,$/;"	e	enum:yytokentype
ANNOTATE	parser.tab.c	/^    ANNOTATE = 335,$/;"	e	enum:yytokentype	file:
ANNOTATE	parser.tab.h	/^    ANNOTATE = 335,$/;"	e	enum:yytokentype
ARRAY_DIMENTION_MAX	src/common.h	44;"	d
BEGIN	lex.yy.c	117;"	d	file:
BLOCK_NEST_MAX	src/common.h	22;"	d
BLOCK_NUM_MAX	src/common.h	34;"	d
BOOL	src/xfunc.h	7;"	d
BREAK	parser.tab.c	/^    BREAK = 311,$/;"	e	enum:yytokentype	file:
BREAK	parser.tab.h	/^    BREAK = 311,$/;"	e	enum:yytokentype
BUFFER_H	src/buffer.h	2;"	d
CASE	parser.tab.c	/^    CASE = 310,$/;"	e	enum:yytokentype	file:
CASE	parser.tab.h	/^    CASE = 310,$/;"	e	enum:yytokentype
CC	Makefile	/^CC=clang$/;"	m
CFLAGS	Makefile	/^CFLAGS=-Isrc\/ -I. -DPREFIX="\\"${DESTDIR}\/\\"" -fPIC -I\/usr\/local\/include -O3$/;"	m
CHARNUM	parser.tab.c	/^    CHARNUM = 259,$/;"	e	enum:yytokentype	file:
CHARNUM	parser.tab.h	/^    CHARNUM = 259,$/;"	e	enum:yytokentype
CLASS_FLAGS_ANONYMOUS	src/common.h	65;"	d
CLASS_FLAGS_ANONYMOUS_VAR_NAME	src/common.h	67;"	d
CLASS_FLAGS_ENUM	src/common.h	66;"	d
CLASS_FLAGS_GENERICS	src/common.h	62;"	d
CLASS_FLAGS_METHOD_GENERICS	src/common.h	63;"	d
CLASS_FLAGS_NUMBER	src/common.h	60;"	d
CLASS_FLAGS_PRIMITIVE	src/common.h	58;"	d
CLASS_FLAGS_STRUCT	src/common.h	59;"	d
CLASS_FLAGS_UNION	src/common.h	64;"	d
CLASS_FLAGS_UNSIGNED_NUMBER	src/common.h	61;"	d
CLASS_NUM_MAX	src/common.h	25;"	d
CLONE	parser.tab.c	/^    CLONE = 280,$/;"	e	enum:yytokentype	file:
CLONE	parser.tab.h	/^    CLONE = 280,$/;"	e	enum:yytokentype
COMMON_H	src/common.h	2;"	d
COMMON_OBJS	Makefile	/^COMMON_OBJS=src\/buffer.o src\/xfunc.o src\/alignment.o$/;"	m
COMPILE_ERR_MSG_MAX	src/common.h	27;"	d
CONST	parser.tab.c	/^    CONST = 273,$/;"	e	enum:yytokentype	file:
CONST	parser.tab.h	/^    CONST = 273,$/;"	e	enum:yytokentype
CONTINUE	parser.tab.c	/^    CONTINUE = 312,$/;"	e	enum:yytokentype	file:
CONTINUE	parser.tab.h	/^    CONTINUE = 312,$/;"	e	enum:yytokentype
CSTRING	parser.tab.c	/^    CSTRING = 264,$/;"	e	enum:yytokentype	file:
CSTRING	parser.tab.h	/^    CSTRING = 264,$/;"	e	enum:yytokentype
CXX	Makefile	/^CXX=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS=`llvm-config --cxxflags --ldflags --system-libs --libs all`  -O3 -I . -I src -DPREFIX="\\"${DESTDIR}\/\\""$/;"	m
DBuilder	src/compile.cpp	/^DIBuilder* DBuilder;$/;"	v
DEFAULT	parser.tab.c	/^    DEFAULT = 313,$/;"	e	enum:yytokentype	file:
DEFAULT	parser.tab.h	/^    DEFAULT = 313,$/;"	e	enum:yytokentype
DESTDIR	Makefile	/^DESTDIR=\/usr\/local$/;"	m
DIV_EQ	parser.tab.c	/^    DIV_EQ = 298,$/;"	e	enum:yytokentype	file:
DIV_EQ	parser.tab.h	/^    DIV_EQ = 298,$/;"	e	enum:yytokentype
DO	parser.tab.c	/^    DO = 308,$/;"	e	enum:yytokentype	file:
DO	parser.tab.h	/^    DO = 308,$/;"	e	enum:yytokentype
Data	code/HelloWorld.c	/^struct Data {$/;"	s	file:
Data2	code/HelloWorld.c	/^union Data2 {$/;"	u	file:
Data3	code/HelloWorld.c	/^struct Data3 {$/;"	s	file:
DblTy	src/compile.cpp	/^    DIType* DblTy;$/;"	m	struct:DebugInfo	file:
DebugInfo	src/compile.cpp	/^struct DebugInfo {$/;"	s	file:
ECHO	lex.yy.c	893;"	d	file:
ELIF_NUM_MAX	src/common.h	33;"	d
ELSE	parser.tab.c	/^    ELSE = 267,$/;"	e	enum:yytokentype	file:
ELSE	parser.tab.h	/^    ELSE = 267,$/;"	e	enum:yytokentype
ENUM	parser.tab.c	/^    ENUM = 290,$/;"	e	enum:yytokentype	file:
ENUM	parser.tab.h	/^    ENUM = 290,$/;"	e	enum:yytokentype
EOB_ACT_CONTINUE_SCAN	lex.yy.c	161;"	d	file:
EOB_ACT_END_OF_FILE	lex.yy.c	162;"	d	file:
EOB_ACT_LAST_MATCH	lex.yy.c	163;"	d	file:
EQEQ	parser.tab.c	/^    EQEQ = 284,$/;"	e	enum:yytokentype	file:
EQEQ	parser.tab.h	/^    EQEQ = 284,$/;"	e	enum:yytokentype
ERROR	parser.tab.c	/^    ERROR = 315,$/;"	e	enum:yytokentype	file:
ERROR	parser.tab.h	/^    ERROR = 315,$/;"	e	enum:yytokentype
EXIT_SUCCESS	parser.tab.c	391;"	d	file:
EXIT_SUCCESS	parser.tab.c	419;"	d	file:
EXTERN	parser.tab.c	/^    EXTERN = 268,$/;"	e	enum:yytokentype	file:
EXTERN	parser.tab.h	/^    EXTERN = 268,$/;"	e	enum:yytokentype
EXTERNAL_OBJECT_MAX	src/common.h	39;"	d
FALSE	src/xfunc.h	9;"	d
FIELDS_NEST_MAX	src/common.h	23;"	d
FLEXINT_H	lex.yy.c	29;"	d	file:
FLEX_BETA	lex.yy.c	13;"	d	file:
FLEX_SCANNER	lex.yy.c	8;"	d	file:
FOR	parser.tab.c	/^    FOR = 306,$/;"	e	enum:yytokentype	file:
FOR	parser.tab.h	/^    FOR = 306,$/;"	e	enum:yytokentype
FUNCTION_POINTER	parser.tab.c	/^    FUNCTION_POINTER = 305,$/;"	e	enum:yytokentype	file:
FUNCTION_POINTER	parser.tab.h	/^    FUNCTION_POINTER = 305,$/;"	e	enum:yytokentype
GENERICS_TYPES_MAX	src/common.h	21;"	d
GTEQ	parser.tab.c	/^    GTEQ = 336,$/;"	e	enum:yytokentype	file:
GTEQ	parser.tab.h	/^    GTEQ = 336,$/;"	e	enum:yytokentype
HAVE_ICONV_H	config.h	3;"	d
HAVE_ICONV_H	config.h	5;"	d
HAVE_MATH_H	config.h	2;"	d
HAVE_PCRE_H	config.h	6;"	d
IDENTIFIER	parser.tab.c	/^    IDENTIFIER = 260,$/;"	e	enum:yytokentype	file:
IDENTIFIER	parser.tab.h	/^    IDENTIFIER = 260,$/;"	e	enum:yytokentype
IF	parser.tab.c	/^    IF = 266,$/;"	e	enum:yytokentype	file:
IF	parser.tab.h	/^    IF = 266,$/;"	e	enum:yytokentype
IMPL_DEF_MAX	src/common.h	38;"	d
INHERIT	parser.tab.c	/^    INHERIT = 291,$/;"	e	enum:yytokentype	file:
INHERIT	parser.tab.h	/^    INHERIT = 291,$/;"	e	enum:yytokentype
INITIAL	lex.yy.c	795;"	d	file:
INIT_ARRAY_MAX	src/common.h	40;"	d
INLINE	parser.tab.c	/^    INLINE = 281,$/;"	e	enum:yytokentype	file:
INLINE	parser.tab.h	/^    INLINE = 281,$/;"	e	enum:yytokentype
INSTALL	Makefile	/^INSTALL=\/usr\/bin\/install -c$/;"	m
INT16_MAX	lex.yy.c	71;"	d	file:
INT16_MIN	lex.yy.c	62;"	d	file:
INT32_MAX	lex.yy.c	74;"	d	file:
INT32_MIN	lex.yy.c	65;"	d	file:
INT8_MAX	lex.yy.c	68;"	d	file:
INT8_MIN	lex.yy.c	59;"	d	file:
INTNUM	parser.tab.c	/^    INTNUM = 258,$/;"	e	enum:yytokentype	file:
INTNUM	parser.tab.h	/^    INTNUM = 258,$/;"	e	enum:yytokentype
KSDbgInfo	src/compile.cpp	/^DebugInfo KSDbgInfo;$/;"	v
LAMBDA	parser.tab.c	/^    LAMBDA = 288,$/;"	e	enum:yytokentype	file:
LAMBDA	parser.tab.h	/^    LAMBDA = 288,$/;"	e	enum:yytokentype
LIBS	Makefile	/^LIBS= -lutil -ldl -lm -lpcre -ly -lfl$/;"	m
LOCAL_VARIABLE_MAX	src/common.h	29;"	d
LONG	parser.tab.c	/^    LONG = 262,$/;"	e	enum:yytokentype	file:
LONG	parser.tab.h	/^    LONG = 262,$/;"	e	enum:yytokentype
LOOP_NEST_MAX	src/common.h	41;"	d
LSHIFT	parser.tab.c	/^    LSHIFT = 338,$/;"	e	enum:yytokentype	file:
LSHIFT	parser.tab.h	/^    LSHIFT = 338,$/;"	e	enum:yytokentype
LSHIFT_EQ	parser.tab.c	/^    LSHIFT_EQ = 303,$/;"	e	enum:yytokentype	file:
LSHIFT_EQ	parser.tab.h	/^    LSHIFT_EQ = 303,$/;"	e	enum:yytokentype
LTEQ	parser.tab.c	/^    LTEQ = 337,$/;"	e	enum:yytokentype	file:
LTEQ	parser.tab.h	/^    LTEQ = 337,$/;"	e	enum:yytokentype
LVALUE	src/compile.cpp	/^typedef struct LVALUEStruct LVALUE;$/;"	t	typeref:struct:LVALUEStruct	file:
LVALUEStruct	src/compile.cpp	/^struct LVALUEStruct {$/;"	s	file:
LexicalBlock	src/compile.cpp	/^    std::vector<DIScope*> LexicalBlock;$/;"	m	struct:DebugInfo	file:
MACRO_MAX	src/common.h	43;"	d
MANAGED	src/xfunc.h	5;"	d
METHOD_DEFAULT_PARAM_MAX	src/common.h	31;"	d
METHOD_MARK	parser.tab.c	/^    METHOD_MARK = 292,$/;"	e	enum:yytokentype	file:
METHOD_MARK	parser.tab.h	/^    METHOD_MARK = 292,$/;"	e	enum:yytokentype
MINUS_EQ	parser.tab.c	/^    MINUS_EQ = 296,$/;"	e	enum:yytokentype	file:
MINUS_EQ	parser.tab.h	/^    MINUS_EQ = 296,$/;"	e	enum:yytokentype
MINUS_MINUS	parser.tab.c	/^    MINUS_MINUS = 295,$/;"	e	enum:yytokentype	file:
MINUS_MINUS	parser.tab.h	/^    MINUS_MINUS = 295,$/;"	e	enum:yytokentype
MOD_EQ	parser.tab.c	/^    MOD_EQ = 299,$/;"	e	enum:yytokentype	file:
MOD_EQ	parser.tab.h	/^    MOD_EQ = 299,$/;"	e	enum:yytokentype
MULT_EQ	parser.tab.c	/^    MULT_EQ = 297,$/;"	e	enum:yytokentype	file:
MULT_EQ	parser.tab.h	/^    MULT_EQ = 297,$/;"	e	enum:yytokentype
NEO_C_STACK_SIZE	src/common.h	28;"	d
NEW	parser.tab.c	/^    NEW = 279,$/;"	e	enum:yytokentype	file:
NEW	parser.tab.h	/^    NEW = 279,$/;"	e	enum:yytokentype
NODE_TYPE_PAGE_SIZE	src/node_type.c	8;"	d	file:
NOT_EQ	parser.tab.c	/^    NOT_EQ = 285,$/;"	e	enum:yytokentype	file:
NOT_EQ	parser.tab.h	/^    NOT_EQ = 285,$/;"	e	enum:yytokentype
NULL	code/HelloWorld.c	232;"	d	file:
OBJS	Makefile	/^OBJS=src\/klass.o src\/node_type.o src\/typedef.o src\/vtable.o src\/node.o$/;"	m
OROR	parser.tab.c	/^    OROR = 287,$/;"	e	enum:yytokentype	file:
OROR	parser.tab.h	/^    OROR = 287,$/;"	e	enum:yytokentype
OR_EQ	parser.tab.c	/^    OR_EQ = 302,$/;"	e	enum:yytokentype	file:
OR_EQ	parser.tab.h	/^    OR_EQ = 302,$/;"	e	enum:yytokentype
OS	Makefile	/^OS=LINUX$/;"	m
PARAMS_MAX	src/common.h	30;"	d
PARSER_ERR_MSG_MAX	src/common.h	26;"	d
PLUS_EQ	parser.tab.c	/^    PLUS_EQ = 294,$/;"	e	enum:yytokentype	file:
PLUS_EQ	parser.tab.h	/^    PLUS_EQ = 294,$/;"	e	enum:yytokentype
PLUS_PLUS	parser.tab.c	/^    PLUS_PLUS = 293,$/;"	e	enum:yytokentype	file:
PLUS_PLUS	parser.tab.h	/^    PLUS_PLUS = 293,$/;"	e	enum:yytokentype
REAL_FUN_NAME_MAX	src/common.h	36;"	d
REAL_STRUCT_NAME_MAX	src/common.h	37;"	d
REGISTER	parser.tab.c	/^    REGISTER = 276,$/;"	e	enum:yytokentype	file:
REGISTER	parser.tab.h	/^    REGISTER = 276,$/;"	e	enum:yytokentype
REJECT	lex.yy.c	742;"	d	file:
RETURN	parser.tab.c	/^    RETURN = 269,$/;"	e	enum:yytokentype	file:
RETURN	parser.tab.h	/^    RETURN = 269,$/;"	e	enum:yytokentype
RSHIFT	parser.tab.c	/^    RSHIFT = 339$/;"	e	enum:yytokentype	file:
RSHIFT	parser.tab.h	/^    RSHIFT = 339$/;"	e	enum:yytokentype
RSHIFT_EQ	parser.tab.c	/^    RSHIFT_EQ = 304,$/;"	e	enum:yytokentype	file:
RSHIFT_EQ	parser.tab.h	/^    RSHIFT_EQ = 304,$/;"	e	enum:yytokentype
RUNTIME_OBJS	Makefile	/^RUNTIME_OBJS=$/;"	m
SHORT	parser.tab.c	/^    SHORT = 263,$/;"	e	enum:yytokentype	file:
SHORT	parser.tab.h	/^    SHORT = 263,$/;"	e	enum:yytokentype
SIGNED	parser.tab.c	/^    SIGNED = 275,$/;"	e	enum:yytokentype	file:
SIGNED	parser.tab.h	/^    SIGNED = 275,$/;"	e	enum:yytokentype
SIZEOF	parser.tab.c	/^    SIZEOF = 314,$/;"	e	enum:yytokentype	file:
SIZEOF	parser.tab.h	/^    SIZEOF = 314,$/;"	e	enum:yytokentype
SIZE_MAX	lex.yy.c	87;"	d	file:
SOURCE_EXPRESSION_MAX	src/common.h	32;"	d
STATIC	parser.tab.c	/^    STATIC = 278,$/;"	e	enum:yytokentype	file:
STATIC	parser.tab.h	/^    STATIC = 278,$/;"	e	enum:yytokentype
STRUCT	parser.tab.c	/^    STRUCT = 282,$/;"	e	enum:yytokentype	file:
STRUCT	parser.tab.h	/^    STRUCT = 282,$/;"	e	enum:yytokentype
STRUCT_FIELD_MAX	src/common.h	35;"	d
SWITCH	parser.tab.c	/^    SWITCH = 309,$/;"	e	enum:yytokentype	file:
SWITCH	parser.tab.h	/^    SWITCH = 309,$/;"	e	enum:yytokentype
SWITCH_STASTMENT_NODE_MAX	src/common.h	45;"	d
T	code/HelloWorld.c	/^struct GenericsData!<T> {$/;"	s	file:
T	code/HelloWorld.c	/^struct GenericsData2!<T> {$/;"	s	file:
T	code/HelloWorld.c	/^struct GenericsData3!<T> {$/;"	s	file:
TEMPLATE	parser.tab.c	/^    TEMPLATE = 289,$/;"	e	enum:yytokentype	file:
TEMPLATE	parser.tab.h	/^    TEMPLATE = 289,$/;"	e	enum:yytokentype
TOKEN_FALSE	parser.tab.c	/^    TOKEN_FALSE = 272,$/;"	e	enum:yytokentype	file:
TOKEN_FALSE	parser.tab.h	/^    TOKEN_FALSE = 272,$/;"	e	enum:yytokentype
TOKEN_TRUE	parser.tab.c	/^    TOKEN_TRUE = 271,$/;"	e	enum:yytokentype	file:
TOKEN_TRUE	parser.tab.h	/^    TOKEN_TRUE = 271,$/;"	e	enum:yytokentype
TRUE	src/xfunc.h	8;"	d
TYPEDEF	parser.tab.c	/^    TYPEDEF = 270,$/;"	e	enum:yytokentype	file:
TYPEDEF	parser.tab.h	/^    TYPEDEF = 270,$/;"	e	enum:yytokentype
TYPEDEF_MAX	src/common.h	42;"	d
TYPE_NAME	parser.tab.c	/^    TYPE_NAME = 261,$/;"	e	enum:yytokentype	file:
TYPE_NAME	parser.tab.h	/^    TYPE_NAME = 261,$/;"	e	enum:yytokentype
TheCU	src/compile.cpp	/^    DICompileUnit* TheCU;$/;"	m	struct:DebugInfo	file:
TheFPM	src/compile.cpp	/^std::unique_ptr<FunctionPassManager> TheFPM;$/;"	v
TheModule	src/compile.cpp	/^Module* TheModule;$/;"	v
UINT16_MAX	lex.yy.c	80;"	d	file:
UINT32_MAX	lex.yy.c	83;"	d	file:
UINT8_MAX	lex.yy.c	77;"	d	file:
UNION	parser.tab.c	/^    UNION = 283,$/;"	e	enum:yytokentype	file:
UNION	parser.tab.h	/^    UNION = 283,$/;"	e	enum:yytokentype
UNSIGNED	parser.tab.c	/^    UNSIGNED = 274,$/;"	e	enum:yytokentype	file:
UNSIGNED	parser.tab.h	/^    UNSIGNED = 274,$/;"	e	enum:yytokentype
VAR_NAME_MAX	src/common.h	24;"	d
VOID	parser.tab.c	/^    VOID = 265,$/;"	e	enum:yytokentype	file:
VOID	parser.tab.h	/^    VOID = 265,$/;"	e	enum:yytokentype
VOLATILE	parser.tab.c	/^    VOLATILE = 277,$/;"	e	enum:yytokentype	file:
VOLATILE	parser.tab.h	/^    VOLATILE = 277,$/;"	e	enum:yytokentype
WHILE	parser.tab.c	/^    WHILE = 307,$/;"	e	enum:yytokentype	file:
WHILE	parser.tab.h	/^    WHILE = 307,$/;"	e	enum:yytokentype
XFUNC_H	src/xfunc.h	2;"	d
XOR_EQ	parser.tab.c	/^    XOR_EQ = 301,$/;"	e	enum:yytokentype	file:
XOR_EQ	parser.tab.h	/^    XOR_EQ = 301,$/;"	e	enum:yytokentype
YYABORT	parser.tab.c	2284;"	d	file:
YYACCEPT	parser.tab.c	2283;"	d	file:
YYBACKUP	parser.tab.c	2290;"	d	file:
YYBISON	parser.tab.c	48;"	d	file:
YYBISON_VERSION	parser.tab.c	51;"	d	file:
YYCASE_	parser.tab.c	2634;"	d	file:
YYCASE_	parser.tab.c	2645;"	d	file:
YYCOPY	parser.tab.c	483;"	d	file:
YYCOPY	parser.tab.c	486;"	d	file:
YYCOPY_NEEDED	parser.tab.c	458;"	d	file:
YYDEBUG	parser.tab.c	143;"	d	file:
YYDEBUG	parser.tab.h	41;"	d
YYDPRINTF	parser.tab.c	2321;"	d	file:
YYDPRINTF	parser.tab.c	2436;"	d	file:
YYEMPTY	parser.tab.c	2280;"	d	file:
YYEOF	parser.tab.c	2281;"	d	file:
YYERRCODE	parser.tab.c	2309;"	d	file:
YYERROR	parser.tab.c	2285;"	d	file:
YYERROR_VERBOSE	parser.tab.c	131;"	d	file:
YYERROR_VERBOSE	parser.tab.c	132;"	d	file:
YYERROR_VERBOSE	parser.tab.c	134;"	d	file:
YYFINAL	parser.tab.c	499;"	d	file:
YYFPRINTF	parser.tab.c	2318;"	d	file:
YYFREE	parser.tab.c	429;"	d	file:
YYINITDEPTH	parser.tab.c	2445;"	d	file:
YYLAST	parser.tab.c	501;"	d	file:
YYMALLOC	parser.tab.c	423;"	d	file:
YYMAXDEPTH	parser.tab.c	2456;"	d	file:
YYMAXUTOK	parser.tab.c	513;"	d	file:
YYNNTS	parser.tab.c	506;"	d	file:
YYNRULES	parser.tab.c	508;"	d	file:
YYNSTATES	parser.tab.c	510;"	d	file:
YYNTOKENS	parser.tab.c	504;"	d	file:
YYPACT_NINF	parser.tab.c	661;"	d	file:
YYPOPSTACK	parser.tab.c	2761;"	d	file:
YYPULL	parser.tab.c	63;"	d	file:
YYPURE	parser.tab.c	57;"	d	file:
YYPUSH	parser.tab.c	60;"	d	file:
YYRECOVERING	parser.tab.c	2288;"	d	file:
YYSIZE_MAXIMUM	parser.tab.c	311;"	d	file:
YYSIZE_T	parser.tab.c	300;"	d	file:
YYSIZE_T	parser.tab.c	302;"	d	file:
YYSIZE_T	parser.tab.c	305;"	d	file:
YYSIZE_T	parser.tab.c	307;"	d	file:
YYSKELETON_NAME	parser.tab.c	54;"	d	file:
YYSTACK_ALLOC	parser.tab.c	377;"	d	file:
YYSTACK_ALLOC	parser.tab.c	381;"	d	file:
YYSTACK_ALLOC	parser.tab.c	386;"	d	file:
YYSTACK_ALLOC	parser.tab.c	409;"	d	file:
YYSTACK_ALLOC_MAXIMUM	parser.tab.c	406;"	d	file:
YYSTACK_ALLOC_MAXIMUM	parser.tab.c	412;"	d	file:
YYSTACK_BYTES	parser.tab.c	454;"	d	file:
YYSTACK_FREE	parser.tab.c	400;"	d	file:
YYSTACK_FREE	parser.tab.c	410;"	d	file:
YYSTACK_GAP_MAXIMUM	parser.tab.c	450;"	d	file:
YYSTACK_RELOCATE	parser.tab.c	465;"	d	file:
YYSTATE	lex.yy.c	123;"	d	file:
YYSTYPE	parser.tab.c	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE	file:
YYSTYPE	parser.tab.c	/^union YYSTYPE$/;"	u	file:
YYSTYPE	parser.tab.h	/^typedef union YYSTYPE YYSTYPE;$/;"	t	typeref:union:YYSTYPE
YYSTYPE	parser.tab.h	/^union YYSTYPE$/;"	u
YYSTYPE_IS_DECLARED	parser.tab.c	258;"	d	file:
YYSTYPE_IS_DECLARED	parser.tab.h	156;"	d
YYSTYPE_IS_TRIVIAL	parser.tab.c	257;"	d	file:
YYSTYPE_IS_TRIVIAL	parser.tab.h	155;"	d
YYTABLES_NAME	lex.yy.c	3180;"	d	file:
YYTABLE_NINF	parser.tab.c	666;"	d	file:
YYTERROR	parser.tab.c	2308;"	d	file:
YYTOKENTYPE	parser.tab.c	151;"	d	file:
YYTOKENTYPE	parser.tab.h	49;"	d
YYTRANSLATE	parser.tab.c	517;"	d	file:
YYUNDEFTOK	parser.tab.c	512;"	d	file:
YYUSE	parser.tab.c	345;"	d	file:
YYUSE	parser.tab.c	347;"	d	file:
YY_	parser.tab.c	317;"	d	file:
YY_	parser.tab.c	321;"	d	file:
YY_ATTRIBUTE	parser.tab.c	329;"	d	file:
YY_ATTRIBUTE	parser.tab.c	331;"	d	file:
YY_ATTRIBUTE_PURE	parser.tab.c	336;"	d	file:
YY_ATTRIBUTE_UNUSED	parser.tab.c	340;"	d	file:
YY_AT_BOL	lex.yy.c	341;"	d	file:
YY_BREAK	lex.yy.c	972;"	d	file:
YY_BUFFER_EOF_PENDING	lex.yy.c	262;"	d	file:
YY_BUFFER_NEW	lex.yy.c	250;"	d	file:
YY_BUFFER_NORMAL	lex.yy.c	251;"	d	file:
YY_BUFFER_STATE	lex.yy.c	/^typedef struct yy_buffer_state *YY_BUFFER_STATE;$/;"	t	typeref:struct:yy_buffer_state	file:
YY_BUF_SIZE	lex.yy.c	137;"	d	file:
YY_BUF_SIZE	lex.yy.c	139;"	d	file:
YY_CHAR	lex.yy.c	/^typedef flex_uint8_t YY_CHAR;$/;"	t	file:
YY_CURRENT_BUFFER	lex.yy.c	278;"	d	file:
YY_CURRENT_BUFFER_LVALUE	lex.yy.c	284;"	d	file:
YY_DECL	lex.yy.c	960;"	d	file:
YY_DECL_IS_OURS	lex.yy.c	956;"	d	file:
YY_DO_BEFORE_ACTION	lex.yy.c	367;"	d	file:
YY_END_OF_BUFFER	lex.yy.c	374;"	d	file:
YY_END_OF_BUFFER_CHAR	lex.yy.c	128;"	d	file:
YY_EXIT_FAILURE	lex.yy.c	2973;"	d	file:
YY_EXTRA_TYPE	lex.yy.c	809;"	d	file:
YY_FATAL_ERROR	lex.yy.c	947;"	d	file:
YY_FLEX_MAJOR_VERSION	lex.yy.c	9;"	d	file:
YY_FLEX_MINOR_VERSION	lex.yy.c	10;"	d	file:
YY_FLEX_SUBMINOR_VERSION	lex.yy.c	11;"	d	file:
YY_FLUSH_BUFFER	lex.yy.c	312;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	parser.tab.c	352;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN	parser.tab.c	362;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	parser.tab.c	356;"	d	file:
YY_IGNORE_MAYBE_UNINITIALIZED_END	parser.tab.c	363;"	d	file:
YY_INITIAL_VALUE	parser.tab.c	359;"	d	file:
YY_INITIAL_VALUE	parser.tab.c	366;"	d	file:
YY_INPUT	lex.yy.c	900;"	d	file:
YY_INT_ALIGNED	lex.yy.c	4;"	d	file:
YY_LESS_LINENO	lex.yy.c	172;"	d	file:
YY_LINENO_REWIND_TO	lex.yy.c	179;"	d	file:
YY_LOCATION_PRINT	parser.tab.c	2329;"	d	file:
YY_MORE_ADJ	lex.yy.c	744;"	d	file:
YY_NEW_FILE	lex.yy.c	127;"	d	file:
YY_NULL	lex.yy.c	106;"	d	file:
YY_NULLPTR	parser.tab.c	120;"	d	file:
YY_NULLPTR	parser.tab.c	122;"	d	file:
YY_NULLPTR	parser.tab.c	125;"	d	file:
YY_NUM_RULES	lex.yy.c	373;"	d	file:
YY_READ_BUF_SIZE	lex.yy.c	882;"	d	file:
YY_READ_BUF_SIZE	lex.yy.c	884;"	d	file:
YY_REDUCE_PRINT	parser.tab.c	2426;"	d	file:
YY_REDUCE_PRINT	parser.tab.c	2439;"	d	file:
YY_RESTORE_YY_MORE_OFFSET	lex.yy.c	745;"	d	file:
YY_RULE_SETUP	lex.yy.c	975;"	d	file:
YY_SC_TO_UI	lex.yy.c	111;"	d	file:
YY_STACK_PRINT	parser.tab.c	2395;"	d	file:
YY_STACK_PRINT	parser.tab.c	2438;"	d	file:
YY_START	lex.yy.c	122;"	d	file:
YY_START_STACK_INCR	lex.yy.c	942;"	d	file:
YY_STATE_BUF_SIZE	lex.yy.c	145;"	d	file:
YY_STATE_EOF	lex.yy.c	125;"	d	file:
YY_STRUCT_YY_BUFFER_STATE	lex.yy.c	203;"	d	file:
YY_SYMBOL_PRINT	parser.tab.c	2333;"	d	file:
YY_SYMBOL_PRINT	parser.tab.c	2437;"	d	file:
YY_TYPEDEF_YY_BUFFER_STATE	lex.yy.c	148;"	d	file:
YY_TYPEDEF_YY_SIZE_T	lex.yy.c	153;"	d	file:
YY_USER_ACTION	lex.yy.c	967;"	d	file:
YY_YY_PARSER_TAB_H_INCLUDED	parser.tab.c	140;"	d	file:
YY_YY_PARSER_TAB_H_INCLUDED	parser.tab.h	38;"	d
_GNU_SOURCE	a.c	1;"	d	file:
_GNU_SOURCE	src/memalloc-stdc.c	1;"	d	file:
__64BIT_CPU__	config.h	19;"	d
__ALIGNED__	parser.tab.c	/^    __ALIGNED__ = 333,$/;"	e	enum:yytokentype	file:
__ALIGNED__	parser.tab.h	/^    __ALIGNED__ = 333,$/;"	e	enum:yytokentype
__ALIGNOF__	parser.tab.c	/^    __ALIGNOF__ = 334,$/;"	e	enum:yytokentype	file:
__ALIGNOF__	parser.tab.h	/^    __ALIGNOF__ = 334,$/;"	e	enum:yytokentype
__ASM__	parser.tab.c	/^    __ASM__ = 324,$/;"	e	enum:yytokentype	file:
__ASM__	parser.tab.h	/^    __ASM__ = 324,$/;"	e	enum:yytokentype
__ATTRIBUTE__	parser.tab.c	/^    __ATTRIBUTE__ = 316,$/;"	e	enum:yytokentype	file:
__ATTRIBUTE__	parser.tab.h	/^    __ATTRIBUTE__ = 316,$/;"	e	enum:yytokentype
__DI__	parser.tab.c	/^    __DI__ = 331,$/;"	e	enum:yytokentype	file:
__DI__	parser.tab.h	/^    __DI__ = 331,$/;"	e	enum:yytokentype
__FORMAT__	parser.tab.c	/^    __FORMAT__ = 320,$/;"	e	enum:yytokentype	file:
__FORMAT__	parser.tab.h	/^    __FORMAT__ = 320,$/;"	e	enum:yytokentype
__HI__	parser.tab.c	/^    __HI__ = 329,$/;"	e	enum:yytokentype	file:
__HI__	parser.tab.h	/^    __HI__ = 329,$/;"	e	enum:yytokentype
__LEAF__	parser.tab.c	/^    __LEAF__ = 317,$/;"	e	enum:yytokentype	file:
__LEAF__	parser.tab.h	/^    __LEAF__ = 317,$/;"	e	enum:yytokentype
__LINUX__	config.h	16;"	d
__MALLOC__	parser.tab.c	/^    __MALLOC__ = 319,$/;"	e	enum:yytokentype	file:
__MALLOC__	parser.tab.h	/^    __MALLOC__ = 319,$/;"	e	enum:yytokentype
__MODE__	parser.tab.c	/^    __MODE__ = 327,$/;"	e	enum:yytokentype	file:
__MODE__	parser.tab.h	/^    __MODE__ = 327,$/;"	e	enum:yytokentype
__NONNULL__	parser.tab.c	/^    __NONNULL__ = 325,$/;"	e	enum:yytokentype	file:
__NONNULL__	parser.tab.h	/^    __NONNULL__ = 325,$/;"	e	enum:yytokentype
__NOTHROW__	parser.tab.c	/^    __NOTHROW__ = 318,$/;"	e	enum:yytokentype	file:
__NOTHROW__	parser.tab.h	/^    __NOTHROW__ = 318,$/;"	e	enum:yytokentype
__PRINTF__	parser.tab.c	/^    __PRINTF__ = 321,$/;"	e	enum:yytokentype	file:
__PRINTF__	parser.tab.h	/^    __PRINTF__ = 321,$/;"	e	enum:yytokentype
__PURE__	parser.tab.c	/^    __PURE__ = 326,$/;"	e	enum:yytokentype	file:
__PURE__	parser.tab.h	/^    __PURE__ = 326,$/;"	e	enum:yytokentype
__QI__	parser.tab.c	/^    __QI__ = 328,$/;"	e	enum:yytokentype	file:
__QI__	parser.tab.h	/^    __QI__ = 328,$/;"	e	enum:yytokentype
__RESTRICT	parser.tab.c	/^    __RESTRICT = 323,$/;"	e	enum:yytokentype	file:
__RESTRICT	parser.tab.h	/^    __RESTRICT = 323,$/;"	e	enum:yytokentype
__SCANF__	parser.tab.c	/^    __SCANF__ = 322,$/;"	e	enum:yytokentype	file:
__SCANF__	parser.tab.h	/^    __SCANF__ = 322,$/;"	e	enum:yytokentype
__SI__	parser.tab.c	/^    __SI__ = 330,$/;"	e	enum:yytokentype	file:
__SI__	parser.tab.h	/^    __SI__ = 330,$/;"	e	enum:yytokentype
__STDC_LIMIT_MACROS	lex.yy.c	39;"	d	file:
__WORD__	parser.tab.c	/^    __WORD__ = 332,$/;"	e	enum:yytokentype	file:
__WORD__	parser.tab.h	/^    __WORD__ = 332,$/;"	e	enum:yytokentype
__X86_64_CPU__	config.h	22;"	d
a	code/HelloWorld.c	/^    T a;$/;"	m	struct:T	file:
a	code/HelloWorld.c	/^    int a:8;$/;"	m	struct:Data3	file:
a	code/HelloWorld.c	/^    int a;$/;"	m	struct:Data	file:
a	code/HelloWorld.c	/^    int a;$/;"	m	union:Data2	file:
aaa	code/aaa.h	/^    int aaa;$/;"	m	struct:__anon3
aaa	code/aaa.h	/^} aaa;$/;"	v	typeref:struct:__anon3
ac_fn_c_check_func	configure	/^ac_fn_c_check_func ()$/;"	f
ac_fn_c_check_header_compile	configure	/^ac_fn_c_check_header_compile ()$/;"	f
ac_fn_c_check_header_mongrel	configure	/^ac_fn_c_check_header_mongrel ()$/;"	f
ac_fn_c_try_compile	configure	/^ac_fn_c_try_compile ()$/;"	f
ac_fn_c_try_cpp	configure	/^ac_fn_c_try_cpp ()$/;"	f
ac_fn_c_try_link	configure	/^ac_fn_c_try_link ()$/;"	f
ac_fn_c_try_run	configure	/^ac_fn_c_try_run ()$/;"	f
add_field_to_struct	src/klass.c	/^void add_field_to_struct(sCLClass* klass, const char* field_name, struct sNodeTypeStruct* field_type)$/;"	f
add_field_to_union	src/klass.c	/^void add_field_to_union(sCLClass* klass, char* field_name, struct sNodeTypeStruct* field_type)$/;"	f
add_function	src/compile.cpp	/^BOOL add_function(char* fun_name, char* fun_base_name, char* result_type_name, int num_params, char** param_types, char** param_names, BOOL var_arg, BOOL inline_, BOOL inherit_, BOOL static_, unsigned int node_block, BOOL generics, BOOL coroutine, BOOL method_generics, sVarTable* lv_table, sCompileInfo* info)$/;"	f
add_typedef	src/typedef.c	/^void add_typedef(char* name, char* type_name)$/;"	f
add_variable_to_table	src/vtable.c	/^BOOL add_variable_to_table(sVarTable* table, char* name, sNodeType* type_, void* llvm_value, int index, BOOL global, BOOL constant)$/;"	f
address	src/compile.cpp	/^    Value* address;$/;"	m	struct:LVALUEStruct	file:
after_return_case_statment	src/parser.y	/^after_return_case_statment: CASE exp ':' {$/;"	l
alignment	src/alignment.c	/^void alignment(unsigned int* size)$/;"	f
alignment_pointer	src/alignment.c	/^void alignment_pointer(char** p, char* head)$/;"	f
alloc_class	src/klass.c	/^static sCLClass* alloc_class(const char* class_name_, BOOL primitive_, BOOL struct_, BOOL number_type, BOOL unsigned_number, int generics_number, int method_generics_number, BOOL union_, BOOL anonymous, BOOL enum_, BOOL anonymous_var_name)$/;"	f	file:
alloc_enum	src/klass.c	/^sCLClass* alloc_enum(char* class_name_)$/;"	f
alloc_node	src/node.c	/^unsigned int alloc_node()$/;"	f
alloc_node_type	src/node_type.c	/^static sNodeType* alloc_node_type()$/;"	f	file:
alloc_struct	src/klass.c	/^sCLClass* alloc_struct(const char* class_name_, BOOL anonymous)$/;"	f
alloc_union	src/klass.c	/^sCLClass* alloc_union(char* class_name_, BOOL anonymous, BOOL anonymous_var_name)$/;"	f
alloca	parser.tab.c	384;"	d	file:
andand_result_var	src/common.h	/^    void* andand_result_var;$/;"	m	struct:sCompileInfoStruct
append_debug_heap_memory	src/memalloc-stdc.c	/^static void append_debug_heap_memory(void* mem, char* type_name, char* sname, int sline, int calloc_num, long long calloc_size, char* fun_name, char* real_fun_name)$/;"	f	file:
append_field_to_fields	src/node.c	/^void append_field_to_fields(unsigned int fields, char* name, char* type_name)$/;"	f
append_heap_object_to_right_value	src/compile.cpp	/^void append_heap_object_to_right_value(LVALUE* llvm_value, sCompileInfo* info)$/;"	f
append_node_to_node_block	src/node.c	/^void append_node_to_node_block(unsigned int node_block, unsigned int node)$/;"	f
append_param_to_function_params	src/node.c	/^void append_param_to_function_params(unsigned int function_params, char* type_name, char* name)$/;"	f
append_param_to_params	src/node.c	/^void append_param_to_params(unsigned int params, unsigned int param)$/;"	f
append_param_to_params_at_head	src/node.c	/^void append_param_to_params_at_head(unsigned int params, unsigned int param)$/;"	f
arrange_stack	src/compile.cpp	/^void arrange_stack(sCompileInfo* info, int top)$/;"	f
array_index	src/parser.y	/^array_index: '[' exp ']' {$/;"	l
array_index_index_node	parser.tab.c	/^unsigned int array_index_index_node[ARRAY_DIMENTION_MAX];$/;"	v
array_index_num_dimention	parser.tab.c	/^int array_index_num_dimention = 0;$/;"	v
array_type	src/parser.y	/^array_type: '[' exp ']' {$/;"	l
array_value	src/parser.y	/^array_value: $/;"	l
array_values	parser.tab.c	/^unsigned int array_values[INIT_ARRAY_MAX];$/;"	v
as_fn_append	config.status	/^  as_fn_append ()$/;"	f
as_fn_append	configure	/^  as_fn_append ()$/;"	f
as_fn_arith	config.status	/^  as_fn_arith ()$/;"	f
as_fn_arith	configure	/^  as_fn_arith ()$/;"	f
as_fn_error	config.status	/^as_fn_error ()$/;"	f
as_fn_error	configure	/^as_fn_error ()$/;"	f
as_fn_executable_p	config.status	/^as_fn_executable_p ()$/;"	f
as_fn_executable_p	configure	/^as_fn_executable_p ()$/;"	f
as_fn_exit	config.status	/^as_fn_exit ()$/;"	f
as_fn_exit	configure	/^as_fn_exit ()$/;"	f
as_fn_failure	configure	/^as_fn_failure () { as_fn_return 1; }$/;"	f
as_fn_mkdir_p	config.status	/^as_fn_mkdir_p ()$/;"	f
as_fn_mkdir_p	configure	/^as_fn_mkdir_p ()$/;"	f
as_fn_ret_failure	configure	/^as_fn_ret_failure () { return 1; }$/;"	f
as_fn_ret_success	configure	/^as_fn_ret_success () { return 0; }$/;"	f
as_fn_set_status	config.status	/^as_fn_set_status ()$/;"	f
as_fn_set_status	configure	/^as_fn_set_status ()$/;"	f
as_fn_success	configure	/^as_fn_success () { as_fn_return 0; }$/;"	f
as_fn_unset	config.status	/^as_fn_unset ()$/;"	f
as_fn_unset	configure	/^as_fn_unset ()$/;"	f
auto_cast_posibility	src/node_type.c	/^BOOL auto_cast_posibility(sNodeType* left_type, sNodeType* right_type)$/;"	f
b	code/HelloWorld.c	/^    T b;$/;"	m	struct:T	file:
b	code/HelloWorld.c	/^    int b:4;$/;"	m	struct:Data3	file:
b	code/HelloWorld.c	/^    int b;$/;"	m	struct:Data	file:
b	code/HelloWorld.c	/^    long b;$/;"	m	union:Data2	file:
bbb	code/aaa.h	/^    int bbb;$/;"	m	struct:__anon3
binded_value	src/compile.cpp	/^    BOOL binded_value;$/;"	m	struct:LVALUEStruct	file:
bindir	Makefile	/^bindir=${exec_prefix}\/bin$/;"	m
block	parser.tab.c	/^unsigned int block;$/;"	v
block	src/parser.y	/^block:  statment                  { $/;"	l
block_end	src/parser.y	/^block_end: {$/;"	l
buf	lex.yy.c	/^char buf[512];$/;"	v
call_destructor	src/compile.cpp	/^static BOOL call_destructor(Value* obj, sNodeType* node_type, sCompileInfo* info)$/;"	f	file:
call_field_destructor	src/compile.cpp	/^static void call_field_destructor(Value* obj, sNodeType* node_type, sCompileInfo* info)$/;"	f	file:
call_function	src/compile.cpp	/^BOOL call_function(const char* fun_name, Value** params, int num_params, const char* struct_name, BOOL no_err_output, sNodeType* generics_type, sCompileInfo* info)$/;"	f
calloc_num	src/memalloc-stdc.c	/^    int calloc_num;$/;"	m	struct:sHeapDebug	file:
calloc_size	src/memalloc-stdc.c	/^    long long calloc_size;$/;"	m	struct:sHeapDebug	file:
case_else_block	src/common.h	/^    void* case_else_block;$/;"	m	struct:sCompileInfoStruct
case_statment	src/parser.y	/^case_statment: CASE exp ':' {$/;"	l
case_then_block	src/common.h	/^    void* case_then_block;$/;"	m	struct:sCompileInfoStruct
cast_posibility	src/node_type.c	/^BOOL cast_posibility(sNodeType* left_type, sNodeType* right_type)$/;"	f
cast_right_type_to_left_type	src/compile.cpp	/^BOOL cast_right_type_to_left_type(sNodeType* left_type, sNodeType** right_type, LVALUE* rvalue, sCompileInfoStruct* info)$/;"	f
char_val	parser.tab.c	/^    char char_val;$/;"	m	union:YYSTYPE	file:
char_val	parser.tab.h	/^    char char_val;$/;"	m	union:YYSTYPE
check_already_added_variable	src/vtable.c	/^void check_already_added_variable(sVarTable* table, char* name)$/;"	f
check_the_same_fields	src/node_type.c	/^BOOL check_the_same_fields(sNodeType* left_node, sNodeType* right_node)$/;"	f
cinfo	parser.tab.c	/^sCompileInfo cinfo;$/;"	v
class_final	src/klass.c	/^void class_final()$/;"	f
class_init	src/klass.c	/^void class_init()$/;"	f
clint64	src/common.h	47;"	d
clone_class	src/klass.c	/^sCLClass* clone_class(sCLClass* klass)$/;"	f
clone_node_type	src/node_type.c	/^sNodeType* clone_node_type(sNodeType* node_type)$/;"	f
clone_var_table	src/vtable.c	/^sVarTable* clone_var_table(sVarTable* lv_table)$/;"	f
comma_exp	src/parser.y	/^comma_exp: exp {$/;"	l
comment	lex.yy.c	797;"	d	file:
comment2	lex.yy.c	798;"	d	file:
compile	src/compile.cpp	/^BOOL compile(unsigned int node, sCompileInfo* info)$/;"	f
compile_add	src/compile.cpp	/^static BOOL compile_add(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_and	src/compile.cpp	/^static BOOL compile_and(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_and_and	src/compile.cpp	/^static BOOL compile_and_and(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_and_eq	src/compile.cpp	/^static BOOL compile_and_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_array_initializer	src/compile.cpp	/^BOOL compile_array_initializer(unsigned int node, sCompileInfo* info)$/;"	f
compile_block	src/compile.cpp	/^BOOL compile_block(unsigned int node_block, sCompileInfo* info, BOOL* last_expression_is_return, BOOL loop_top)$/;"	f
compile_break_expression	src/compile.cpp	/^BOOL compile_break_expression(unsigned int node, sCompileInfo* info)$/;"	f
compile_case_expression	src/compile.cpp	/^BOOL compile_case_expression(unsigned int node, sCompileInfo* info)$/;"	f
compile_cast	src/compile.cpp	/^BOOL compile_cast(unsigned int node, sCompileInfo* info)$/;"	f
compile_char_value	src/compile.cpp	/^static BOOL compile_char_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_clone	src/compile.cpp	/^static BOOL compile_clone(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_complement	src/compile.cpp	/^static BOOL compile_complement(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_conditional	src/compile.cpp	/^static BOOL compile_conditional(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_continue_expression	src/compile.cpp	/^BOOL compile_continue_expression(unsigned int node, sCompileInfo* info)$/;"	f
compile_coroutine	src/compile.cpp	/^BOOL compile_coroutine(unsigned int node, sCompileInfo* info)$/;"	f
compile_create_object	src/compile.cpp	/^static BOOL compile_create_object(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_define_variable	src/compile.cpp	/^static BOOL compile_define_variable(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_dereffernce	src/compile.cpp	/^static BOOL compile_dereffernce(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_div	src/compile.cpp	/^static BOOL compile_div(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_div_eq	src/compile.cpp	/^static BOOL compile_div_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_do_while_statment	src/compile.cpp	/^static BOOL compile_do_while_statment(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_equals	src/compile.cpp	/^static BOOL compile_equals(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_err_msg	src/compile.cpp	/^void compile_err_msg(sCompileInfo* info, const char* msg, ...)$/;"	f
compile_external_function	src/compile.cpp	/^BOOL compile_external_function(unsigned int node, sCompileInfo* info)$/;"	f
compile_false	src/compile.cpp	/^static BOOL compile_false(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_for_statment	src/compile.cpp	/^static BOOL compile_for_statment(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_function	src/compile.cpp	/^BOOL compile_function(unsigned int node, sCompileInfo* info)$/;"	f
compile_function_call	src/compile.cpp	/^BOOL compile_function_call(unsigned int node, sCompileInfo* info)$/;"	f
compile_ge	src/compile.cpp	/^static BOOL compile_ge(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_gt	src/compile.cpp	/^static BOOL compile_gt(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_if	src/compile.cpp	/^static BOOL compile_if(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_int_value	src/compile.cpp	/^static BOOL compile_int_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_le	src/compile.cpp	/^static BOOL compile_le(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_load_element	src/compile.cpp	/^static BOOL compile_load_element(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_load_field	src/compile.cpp	/^static BOOL compile_load_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_load_variable	src/compile.cpp	/^static BOOL compile_load_variable(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_logical_denial	src/compile.cpp	/^static BOOL compile_logical_denial(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_lshift	src/compile.cpp	/^static BOOL compile_lshift(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_lshift_eq	src/compile.cpp	/^static BOOL compile_lshift_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_lt	src/compile.cpp	/^static BOOL compile_lt(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_minus_eq	src/compile.cpp	/^static BOOL compile_minus_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_mod	src/compile.cpp	/^static BOOL compile_mod(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_mod_eq	src/compile.cpp	/^static BOOL compile_mod_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_mult	src/compile.cpp	/^static BOOL compile_mult(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_mult_eq	src/compile.cpp	/^static BOOL compile_mult_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_not_equals	src/compile.cpp	/^static BOOL compile_not_equals(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_or	src/compile.cpp	/^static BOOL compile_or(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_or_eq	src/compile.cpp	/^static BOOL compile_or_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_or_or	src/compile.cpp	/^static BOOL compile_or_or(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_plus_eq	src/compile.cpp	/^static BOOL compile_plus_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_reffernce	src/compile.cpp	/^static BOOL compile_reffernce(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_return	src/compile.cpp	/^static BOOL compile_return(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_rshift	src/compile.cpp	/^static BOOL compile_rshift(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_rshift_eq	src/compile.cpp	/^static BOOL compile_rshift_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_sizeof1	src/compile.cpp	/^static BOOL compile_sizeof1(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_sizeof2	src/compile.cpp	/^BOOL compile_sizeof2(unsigned int node, sCompileInfo* info)$/;"	f
compile_store_element	src/compile.cpp	/^BOOL compile_store_element(unsigned int node, sCompileInfo* info)$/;"	f
compile_store_field	src/compile.cpp	/^static BOOL compile_store_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_store_variable	src/compile.cpp	/^static BOOL compile_store_variable(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_str_value	src/compile.cpp	/^static BOOL compile_str_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_struct	src/compile.cpp	/^BOOL compile_struct(unsigned int node, sCompileInfo* info)$/;"	f
compile_sub	src/compile.cpp	/^static BOOL compile_sub(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_switch_statment	src/compile.cpp	/^BOOL compile_switch_statment(unsigned int node, sCompileInfo* info)$/;"	f
compile_true	src/compile.cpp	/^static BOOL compile_true(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_typedef	src/compile.cpp	/^BOOL compile_typedef(unsigned int node, sCompileInfo* info)$/;"	f
compile_union	src/compile.cpp	/^BOOL compile_union(unsigned int node, sCompileInfo* info)$/;"	f
compile_while_statment	src/compile.cpp	/^static BOOL compile_while_statment(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_xor	src/compile.cpp	/^static BOOL compile_xor(unsigned int node, sCompileInfo* info)$/;"	f	file:
compile_xor_eq	src/compile.cpp	/^static BOOL compile_xor_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
compiler_final	src/main.c	/^static void compiler_final()$/;"	f	file:
compiler_init	src/main.c	/^static void compiler_init()$/;"	f	file:
const_array_type	src/parser.y	/^const_array_type: '[' INTNUM ']' {$/;"	l
const_test	code/HelloWorld.c	/^bool const_test(const char* str) $/;"	f
createDebugFunctionInfo	src/compile.cpp	/^void createDebugFunctionInfo(int sline, const char* fun_name, sFunction* function, Function* llvm_function)$/;"	f
createDebugFunctionType	src/compile.cpp	/^static DISubroutineType* createDebugFunctionType(sFunction* function, DIFile* unit)$/;"	f	file:
create_debug_type	src/compile.cpp	/^static DIType* create_debug_type(sNodeType* node_type) $/;"	f	file:
create_generics_function	src/compile.cpp	/^static BOOL create_generics_function(char* id, char* fun_name, sCLClass* klass, sFunction* fun, char* real_fun_name2, sCompileInfo* info, int sline) $/;"	f	file:
create_global_lvtable	src/compile.cpp	/^void create_global_lvtable(sCompileInfo* info)$/;"	f
create_internal_functions	src/compile.cpp	/^void create_internal_functions()$/;"	f
create_llvm_function	src/compile.cpp	/^static BOOL create_llvm_function(sFunction* fun, sVarTable* fun_lv_table, sCompileInfo* info, int sline)$/;"	f	file:
create_llvm_struct_type	src/compile.cpp	/^static BOOL create_llvm_struct_type(sNodeType* node_type, sNodeType* generics_type, BOOL new_create, sCompileInfo* info)$/;"	f	file:
create_llvm_type_from_node_type	src/compile.cpp	/^BOOL create_llvm_type_from_node_type(Type** result_type, sNodeType* node_type, sNodeType* generics_type, sCompileInfo* info)$/;"	f
create_llvm_union_type	src/compile.cpp	/^static BOOL create_llvm_union_type(sNodeType* node_type, sNodeType* generics_type, sCompileInfo* info)$/;"	f	file:
create_node_type_with_class_name	src/node_type.c	/^sNodeType* create_node_type_with_class_name(const char* class_name_)$/;"	f
create_node_type_with_class_pointer	src/node_type.c	/^sNodeType* create_node_type_with_class_pointer(sCLClass* klass)$/;"	f
create_real_struct_name	src/compile.cpp	/^static void create_real_struct_name(char* real_struct_name, int size_real_struct_name, int num_generics, sNodeType* generics_types[GENERICS_TYPES_MAX])$/;"	f	file:
create_type_name_from_node_type	src/node_type.c	/^void create_type_name_from_node_type(char* type_name, int type_name_max, sNodeType* node_type, BOOL neo_c)$/;"	f
create_undefined_llvm_struct_type	src/compile.cpp	/^static void create_undefined_llvm_struct_type(sNodeType* node_type)$/;"	f	file:
cstring_array_value2	src/parser.y	/^cstring_array_value2: CSTRING {$/;"	l
current_block	src/common.h	/^    void* current_block;$/;"	m	struct:sCompileInfoStruct
cval	parser.tab.c	/^    char cval[128];$/;"	m	union:YYSTYPE	file:
cval	parser.tab.h	/^    char cval[128];$/;"	m	union:YYSTYPE
datadir	Makefile	/^datadir=${datarootdir}$/;"	m
datarootdir	Makefile	/^datarootdir=${prefix}\/share\/neo-c2$/;"	m
debug_show_none_freed_heap_memory	src/memalloc-stdc.c	/^void debug_show_none_freed_heap_memory() $/;"	f
debug_xcalloc	src/memalloc-stdc.c	/^void *debug_xcalloc(long long int num, long long int nsize, char* type_name, char* sname, int sline, char* fun_name, char* real_fun_name)$/;"	f
dec_stack_ptr	src/compile.cpp	/^void dec_stack_ptr(int value, sCompileInfo* info)$/;"	f
declare_builtin_functions	src/compile.cpp	/^void declare_builtin_functions()$/;"	f
delete_debug_heap_memory	src/memalloc-stdc.c	/^static void delete_debug_heap_memory(void* mem)$/;"	f	file:
determine_method_generics	src/compile.cpp	/^static void determine_method_generics(char* method_generics_types[VAR_NAME_MAX], sFunction* fun, sNodeType** param_types)$/;"	f	file:
determine_method_generics_core	src/compile.cpp	/^static void determine_method_generics_core(sNodeType* left_type, sNodeType* right_type, char** method_generics_types)$/;"	f	file:
docdir	Makefile	/^docdir=${datarootdir}\/doc$/;"	m
eNodeType	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	g
elif_blocks	parser.tab.c	/^unsigned int elif_blocks[ELIF_NUM_MAX];$/;"	v
elif_exps	parser.tab.c	/^unsigned int elif_exps[ELIF_NUM_MAX];$/;"	v
elif_num	parser.tab.c	/^int elif_num;$/;"	v
elif_statment	src/parser.y	/^elif_statment:$/;"	l
emitLocaltion	src/compile.cpp	/^static void emitLocaltion(DebugInfo* info, int sline)$/;"	f	file:
entry_llvm_function	src/compile.cpp	/^static BOOL entry_llvm_function(sFunction* fun, sNodeType* generics_type, sCompileInfo* info)$/;"	f	file:
enum_	src/parser.y	/^enum_: ENUM '{' enum_fields '}' ';' {$/;"	l
enum_fields	src/parser.y	/^enum_fields: {$/;"	l
enum_number	parser.tab.c	/^int enum_number = 0;$/;"	v
err_num	src/common.h	/^    int err_num;$/;"	m	struct:sCompileInfoStruct
exec_prefix	Makefile	/^exec_prefix=${prefix}$/;"	m
existance	src/compile.cpp	/^    bool existance;$/;"	m	struct:sFunctionStruct	file:
exp	src/parser.y	/^exp: node {$/;"	l
fields	parser.tab.c	/^unsigned int fields;$/;"	v
fields	src/parser.y	/^fields:  { $/;"	l
final_vtable	src/vtable.c	/^void final_vtable()$/;"	f
finishDebugFunctionInfo	src/compile.cpp	/^void finishDebugFunctionInfo()$/;"	f
flex_int16_t	lex.yy.c	/^typedef int16_t flex_int16_t;$/;"	t	file:
flex_int16_t	lex.yy.c	/^typedef short int flex_int16_t;$/;"	t	file:
flex_int32_t	lex.yy.c	/^typedef int flex_int32_t;$/;"	t	file:
flex_int32_t	lex.yy.c	/^typedef int32_t flex_int32_t;$/;"	t	file:
flex_int8_t	lex.yy.c	/^typedef int8_t flex_int8_t;$/;"	t	file:
flex_int8_t	lex.yy.c	/^typedef signed char flex_int8_t;$/;"	t	file:
flex_uint16_t	lex.yy.c	/^typedef uint16_t flex_uint16_t;$/;"	t	file:
flex_uint16_t	lex.yy.c	/^typedef unsigned short int flex_uint16_t;$/;"	t	file:
flex_uint32_t	lex.yy.c	/^typedef uint32_t flex_uint32_t;$/;"	t	file:
flex_uint32_t	lex.yy.c	/^typedef unsigned int flex_uint32_t;$/;"	t	file:
flex_uint8_t	lex.yy.c	/^typedef uint8_t flex_uint8_t;$/;"	t	file:
flex_uint8_t	lex.yy.c	/^typedef unsigned char flex_uint8_t; $/;"	t	file:
free_class	src/klass.c	/^static void free_class(sCLClass* klass)$/;"	f	file:
free_node_types	src/node_type.c	/^void free_node_types()$/;"	f
free_nodes	src/node.c	/^void free_nodes()$/;"	f
free_object	src/compile.cpp	/^void free_object(sNodeType* node_type, void* address, BOOL force_delete, sCompileInfo* info)$/;"	f
free_objects	src/compile.cpp	/^void free_objects(sVarTable* table, Value* inhibit_free_object_address, sCompileInfo* info)$/;"	f
free_objects_until_loop_top	src/compile.cpp	/^void free_objects_until_loop_top(Value* inhibit_free_object_address, sCompileInfo* info)$/;"	f
free_objects_with_parents	src/compile.cpp	/^void free_objects_with_parents(Value* inhibit_free_object_address, sCompileInfo* info)$/;"	f
free_right_value_object	src/compile.cpp	/^static void free_right_value_object(sNodeType* node_type, void* obj, BOOL force_delete, sCompileInfo* info)$/;"	f	file:
free_right_value_objects	src/compile.cpp	/^void free_right_value_objects(sCompileInfo* info)$/;"	f
freed	src/memalloc-stdc.c	/^    int freed;$/;"	m	struct:sHeapDebug	file:
fun	a.c	/^int fun(int a, int b)$/;"	f
fun	code/HelloWorld.c	/^int int::fun(int self) {$/;"	f
fun2	code/HelloWorld.c	/^template !<M> M fun2(M a) {$/;"	f
fun3	code/HelloWorld.c	/^template !<M> M fun3(M (*aaa)(char*), char* bbb) {$/;"	f
funXXX	code/HelloWorld.c	/^int funXXX() {$/;"	f
fun_name	src/memalloc-stdc.c	/^    char fun_name[128];$/;"	m	struct:sHeapDebug	file:
fun_node	parser.tab.c	/^unsigned int fun_node;$/;"	v
func_params	parser.tab.c	/^unsigned int func_params;$/;"	v
function	src/common.h	/^    void* function;$/;"	m	struct:sCompileInfoStruct
function	src/parser.y	/^function: $/;"	l
function_attribute	src/parser.y	/^function_attribute: {$/;"	l
function_attribute_core	src/parser.y	/^function_attribute_core:$/;"	l
function_block	src/parser.y	/^function_block:  statment                  { $/;"	l
function_existance	src/compile.cpp	/^BOOL function_existance(char* fun_name)$/;"	f
function_generics_types	lex.yy.c	/^char function_generics_types[GENERICS_TYPES_MAX][VAR_NAME_MAX];$/;"	v
function_generics_types	parser.tab.c	/^char function_generics_types[GENERICS_TYPES_MAX][VAR_NAME_MAX];$/;"	v
function_generics_types	src/parser.y	/^function_generics_types: {$/;"	l
function_params	src/parser.y	/^function_params: { $/;"	l
function_params2	src/parser.y	/^function_params2: { $/;"	l
function_params_end	src/parser.y	/^function_params_end: {$/;"	l
function_pointer_type_params	src/parser.y	/^function_pointer_type_params: {$/;"	l
function_result_type	src/common.h	/^    sNodeType* function_result_type;$/;"	m	struct:sCompileInfoStruct
function_struct_type_name	src/parser.y	/^function_struct_type_name: TYPE_NAME {$/;"	l
gA	code/HelloWorld.c	/^int gA;$/;"	v
gAAAAAA	code/HelloWorld.c	/^long int gAAAAAA = AAAAA;$/;"	v
gArray	code/HelloWorld.c	/^int gArray[3] = { 1, 2, 3 };$/;"	v
gArray2	code/HelloWorld.c	/^char gArray2[3] = "AB";$/;"	v
gArray3	code/HelloWorld.c	/^int gArray3[] = { 1, 2, 3 };$/;"	v
gArray4	code/HelloWorld.c	/^int gArray4[3][3][3] = {$/;"	v
gB	code/HelloWorld.c	/^int gB = 123;$/;"	v
gClassTable	src/klass.c	/^static sClassTable gClassTable[CLASS_NUM_MAX];$/;"	v	file:
gFuncs	src/compile.cpp	/^std::map<std::string, std::vector<sFunction>> gFuncs;$/;"	v
gHeadClassTable	src/klass.c	/^sClassTable* gHeadClassTable = NULL;$/;"	v
gHeadVTable	src/vtable.c	/^sVarTable* gHeadVTable;$/;"	v
gHeapDebugs	src/memalloc-stdc.c	/^struct sHeapDebug* gHeapDebugs = NULL;$/;"	v	typeref:struct:sHeapDebug
gLLVMStack	src/compile.cpp	/^LVALUE* gLLVMStack;$/;"	v
gLLVMStackHead	src/compile.cpp	/^LVALUE* gLLVMStackHead;$/;"	v
gLLVMStructType	src/compile.cpp	/^std::map<std::string, std::pair<Type*, sNodeType*>> gLLVMStructType;$/;"	v
gLVTable	parser.tab.c	/^sVarTable* gLVTable;$/;"	v
gMainModulePath	src/main.c	/^char gMainModulePath[PATH_MAX];$/;"	v
gMaxMemAlloc	src/memalloc-stdc.c	/^int gMaxMemAlloc = 0;$/;"	v
gNCDebug	src/main.c	/^BOOL gNCDebug = FALSE;$/;"	v
gNCDebugHeap	src/memalloc-stdc.c	/^int gNCDebugHeap = 1;$/;"	v
gNodeTypes	src/node_type.c	/^static sNodeType** gNodeTypes = NULL;$/;"	v	file:
gNodes	src/node.c	/^sNodeTree* gNodes;$/;"	v
gNumHeapDebugs	src/memalloc-stdc.c	/^int gNumHeapDebugs = 0;$/;"	v
gNumMemAlloc	src/memalloc-stdc.c	/^int gNumMemAlloc = 0;$/;"	v
gSData	code/HelloWorld.c	/^sDataType* gSData;$/;"	v
gSName	src/main.c	/^char gSName[PATH_MAX];$/;"	v
gSNameOriginal	src/main.c	/^char gSNameOriginal[PATH_MAX];$/;"	v
gSizeHeapDebugs	src/memalloc-stdc.c	/^int gSizeHeapDebugs = 0;$/;"	v
gSizeNodes	src/node.c	/^int gSizeNodes = 0;$/;"	v
gSizePageNodeTypes	src/node_type.c	/^static int gSizePageNodeTypes = 0;$/;"	v	file:
gTypeDefTable	src/typedef.c	/^static struct sTypeDefTable gTypeDefTable[TYPEDEF_MAX];$/;"	v	typeref:struct:sTypeDefTable	file:
gUsedNodeTypes	src/node_type.c	/^static int gUsedNodeTypes = 0;$/;"	v	file:
gUsedNodes	src/node.c	/^int gUsedNodes = 0;$/;"	v
gUsedPageNodeTypes	src/node_type.c	/^static int gUsedPageNodeTypes = 0;$/;"	v	file:
gVersion	src/main.c	/^char* gVersion = "0.0.1";$/;"	v
generics_type	src/common.h	/^    sNodeType* generics_type;$/;"	m	struct:sCompileInfoStruct
generics_types	src/parser.y	/^generics_types: type {$/;"	l
get_class	src/klass.c	/^sCLClass* get_class(char* class_name_)$/;"	f
get_const_value_from_node	src/compile.cpp	/^BOOL get_const_value_from_node(int* array_size, unsigned int array_size_node, sCompileInfo* cinfo)$/;"	f
get_dummy_value	src/compile.cpp	/^Value* get_dummy_value(sNodeType* node_type, sCompileInfo* info)$/;"	f
get_field_index	src/klass.c	/^int get_field_index(sCLClass* klass, char* var_name, int* parent_field_index)$/;"	f
get_hash_key	src/klass.c	/^unsigned int get_hash_key(const char* name, unsigned int max)$/;"	f
get_llvm_alignment_from_node_type	src/compile.cpp	/^int get_llvm_alignment_from_node_type(sNodeType* node_type)$/;"	f
get_lvtable_type	src/compile.cpp	/^static Type* get_lvtable_type()$/;"	f	file:
get_parent_var_num_of_sum	src/vtable.c	/^int get_parent_var_num_of_sum(sVarTable* table)$/;"	f
get_size_from_node_type	src/compile.cpp	/^BOOL get_size_from_node_type(uint64_t* result, sNodeType* node_type, sNodeType* generics_type, sCompileInfo* info)$/;"	f
get_sum_of_parent_var_num	src/vtable.c	/^static int get_sum_of_parent_var_num(sVarTable* table)$/;"	f	file:
get_type_of_method_generics	src/node_type.c	/^BOOL get_type_of_method_generics(sNodeType* method_generics_types[GENERICS_TYPES_MAX], sNodeType* fun_param_type, sNodeType* param_type)$/;"	f
get_typedef	src/typedef.c	/^void get_typedef(char* name, char* result)$/;"	f
get_value_from_stack	src/compile.cpp	/^LVALUE* get_value_from_stack(int offset)$/;"	f
get_var_num	src/vtable.c	/^int get_var_num(sVarTable* table)$/;"	f
get_variable_from_index	src/vtable.c	/^sVar* get_variable_from_index(sVarTable* table, int index)$/;"	f
get_variable_from_table	src/vtable.c	/^sVar* get_variable_from_table(sVarTable* table, char* name)$/;"	f
get_variable_from_this_table_only	src/vtable.c	/^sVar* get_variable_from_this_table_only(sVarTable* table, char* name)$/;"	f
get_variable_index	src/vtable.c	/^int get_variable_index(sVarTable* table, char* name, BOOL* parent)$/;"	f
get_version	src/compile.cpp	/^void get_version(sFunction* fun, char* fun_name)$/;"	f
global_variable	src/parser.y	/^global_variable:$/;"	l
gv_table	src/common.h	/^    sVarTable* gv_table;$/;"	m	struct:sCompileInfoStruct
included_generics_type	src/node_type.c	/^BOOL included_generics_type(sNodeType* node_type, sCLClass* checked_class[], int* num_checked_class)$/;"	f
includedir	Makefile	/^includedir=${prefix}\/include\/neo-c2$/;"	m
inheritFun	code/HelloWorld.c	/^inherit void inheritFun()$/;"	f
inheritFun	code/HelloWorld.c	/^void inheritFun()$/;"	f
inherit_	parser.tab.c	/^BOOL inherit_ = FALSE;$/;"	v
init_node_types	src/node_type.c	/^void init_node_types()$/;"	f
init_nodes	src/node.c	/^void init_nodes()$/;"	f
init_typedef	src/typedef.c	/^void init_typedef()$/;"	f
init_var_table	src/vtable.c	/^sVarTable* init_var_table()$/;"	f
init_vtable	src/vtable.c	/^void init_vtable()$/;"	f
inline_	parser.tab.c	/^BOOL inline_ = FALSE;$/;"	v
is_generics_type	src/compile.cpp	/^static BOOL is_generics_type(sNodeType* node_type)$/;"	f	file:
is_included_var_from_this_table_only	src/vtable.c	/^BOOL is_included_var_from_this_table_only(sVarTable* table, sVar* var_)$/;"	f
is_number_type	src/node_type.c	/^BOOL is_number_type(sNodeType* node_type)$/;"	f
is_type_name	lex.yy.c	/^BOOL is_type_name(char* name)$/;"	f
is_typeof_type	src/node_type.c	/^BOOL is_typeof_type(sNodeType* node_type)$/;"	f
it	parser.tab.c	/^unsigned int it;$/;"	v
ival	parser.tab.c	/^    long ival;$/;"	m	union:YYSTYPE	file:
ival	parser.tab.h	/^    long ival;$/;"	m	union:YYSTYPE
kA	code/HelloWorld.c	/^enum { kA, kB, kC };$/;"	e	enum:__anon1	file:
kA2	code/HelloWorld.c	/^enum { kA2 = 123, kB2, kC2 };$/;"	e	enum:__anon2	file:
kB	code/HelloWorld.c	/^enum { kA, kB, kC };$/;"	e	enum:__anon1	file:
kB2	code/HelloWorld.c	/^enum { kA2 = 123, kB2, kC2 };$/;"	e	enum:__anon2	file:
kC	code/HelloWorld.c	/^enum { kA, kB, kC };$/;"	e	enum:__anon1	file:
kC2	code/HelloWorld.c	/^enum { kA2 = 123, kB2, kC2 };$/;"	e	enum:__anon2	file:
kNodeTYpeMod	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeAdd	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeAnd	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeAndAnd	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeAndEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeArrayInitializer	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeBlock	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeBreak	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeCStringValue	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeCase	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeCast	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeCharValue	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeClone	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeComplement	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeConditional	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeContinue	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeCoroutine	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeCreateObject	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeDefineVariable	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeDerefference	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeDiv	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeDivEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeDoWhile	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeEquals	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeExternalFunction	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeFalse	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeFields	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeFor	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeFunction	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeFunctionCall	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeFunctionParams	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeGE	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeGT	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeIf	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeIntValue	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLE	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLShift	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLShiftEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLT	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLoadElement	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLoadField	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLoadVariable	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeLogicalDenial	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeMinusEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeMod	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeModEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeMult	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeMultEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeNotEquals	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeOr	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeOrEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeOrOr	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeParams	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypePlusEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeRShift	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeRShiftEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeRefference	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeReturn	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeSizeOf1	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeSizeOf2	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeStoreElement	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeStoreField	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeStoreVariable	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeStruct	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeSub	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeSwitch	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeTrue	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeTypeDef	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeUnion	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeWhile	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeXor	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
kNodeTypeXorEq	src/common.h	/^enum eNodeType { kNodeTypeTrue, kNodeTypeFalse, kNodeTypeIntValue, kNodeTypeCharValue, kNodeTypeAdd, kNodeTypeSub, kNodeTypeMult, kNodeTypeDiv, kNodeTYpeMod, kNodeTypeBlock, kNodeTypeFunction, kNodeTypeParams, kNodeTypeFunctionParams , kNodeTypeReturn, kNodeTypeStoreVariable, kNodeTypeFunctionCall, kNodeTypeExternalFunction, kNodeTypeLoadVariable, kNodeTypeCStringValue, kNodeTypeIf, kNodeTypeCreateObject, kNodeTypeTypeDef, kNodeTypeClone, kNodeTypeFields, kNodeTypeStruct, kNodeTypeUnion, kNodeTypeDefineVariable, kNodeTypeEquals, kNodeTypeNotEquals, kNodeTypeLoadField, kNodeTypeStoreField, kNodeTypeAndAnd, kNodeTypeOrOr, kNodeTypeGT, kNodeTypeLT, kNodeTypeGE, kNodeTypeLE, kNodeTypeMod, kNodeTypeLShift, kNodeTypeRShift, kNodeTypeOr, kNodeTypeXor, kNodeTypeAnd, kNodeTypeLogicalDenial, kNodeTypeComplement, kNodeTypeRefference, kNodeTypeDerefference, kNodeTypePlusEq, kNodeTypeMinusEq, kNodeTypeMultEq, kNodeTypeDivEq, kNodeTypeModEq, kNodeTypeAndEq, kNodeTypeXorEq, kNodeTypeOrEq, kNodeTypeLShiftEq, kNodeTypeRShiftEq, kNodeTypeLoadElement, kNodeTypeStoreElement, kNodeTypeArrayInitializer, kNodeTypeFor, kNodeTypeWhile, kNodeTypeDoWhile, kNodeTypeSwitch, kNodeTypeCase, kNodeTypeBreak, kNodeTypeContinue, kNodeTypeCast, kNodeTypeSizeOf1, kNodeTypeSizeOf2, kNodeTypeCoroutine, kNodeTypeConditional };$/;"	e	enum:eNodeType
libdir	Makefile	/^libdir=${exec_prefix}\/lib$/;"	m
llvm_change_block	src/compile.cpp	/^void llvm_change_block(BasicBlock* current_block, BasicBlock** current_block_before, sCompileInfo* info, BOOL no_free_right_objects)$/;"	f
llvm_create_string	src/compile.cpp	/^Value* llvm_create_string(char* str)$/;"	f
llvm_final	src/compile.cpp	/^void llvm_final()$/;"	f
llvm_init	src/compile.cpp	/^void llvm_init()$/;"	f
load_address_to_lvtable	src/compile.cpp	/^Value* load_address_to_lvtable(int index, sNodeType* var_type, sCompileInfo* info)$/;"	f
load_field	src/compile.cpp	/^    BOOL load_field;$/;"	m	struct:LVALUEStruct	file:
loop_begin_block	src/common.h	/^    void* loop_begin_block[LOOP_NEST_MAX];$/;"	m	struct:sCompileInfoStruct
loop_end_block	src/common.h	/^    void* loop_end_block[LOOP_NEST_MAX];$/;"	m	struct:sCompileInfoStruct
loop_top_block	src/common.h	/^    void* loop_top_block;$/;"	m	struct:sCompileInfoStruct
loop_top_lv_table	src/common.h	/^    sVarTable* loop_top_lv_table;$/;"	m	struct:sCompileInfoStruct
lv_table	src/common.h	/^    sVarTable* lv_table;$/;"	m	struct:sCompileInfoStruct
lv_table_value	src/common.h	/^    void* lv_table_value;$/;"	m	struct:sCompileInfoStruct
mAlloc	src/common.h	/^            BOOL mAlloc;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon6
mAnonymous	src/common.h	/^            BOOL mAnonymous;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon17
mArrayDimentionNum	src/common.h	/^            int mArrayDimentionNum;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon19
mArrayDimentionNum	src/common.h	/^            int mArrayDimentionNum;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon20
mArrayDimentionNum	src/common.h	/^    int mArrayDimentionNum;$/;"	m	struct:sNodeTypeStruct
mArrayInitializeNum	src/common.h	/^    int mArrayInitializeNum;$/;"	m	struct:sNodeTypeStruct
mArrayNum	src/common.h	/^    int mArrayNum[ARRAY_DIMENTION_MAX];$/;"	m	struct:sNodeTypeStruct
mArrayValues	src/common.h	/^            unsigned int mArrayValues[INIT_ARRAY_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon21
mBaseName	src/common.h	/^            char mBaseName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mBaseName	src/compile.cpp	/^    char mBaseName[VAR_NAME_MAX];$/;"	m	struct:sFunctionStruct	file:
mBlockLevel	src/common.h	/^    int mBlockLevel;$/;"	m	struct:sVarStruct
mBlockLevel	src/common.h	/^    int mBlockLevel;$/;"	m	struct:sVarTableStruct
mBuf	src/buffer.h	/^    char* mBuf;$/;"	m	struct:sBufStruct
mCaseAfterReturn	src/common.h	/^            BOOL mCaseAfterReturn;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon25
mCharValue	src/common.h	/^        char mCharValue;$/;"	m	union:sNodeTreeStruct::__anon4
mClass	src/common.h	/^    sCLClass* mClass;$/;"	m	struct:sNodeTypeStruct
mConstant	src/common.h	/^    BOOL mConstant;$/;"	m	struct:sNodeTypeStruct
mConstant	src/common.h	/^    BOOL mConstant;$/;"	m	struct:sVarStruct
mCoroutine	src/common.h	/^            BOOL mCoroutine;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mCoroutine	src/compile.cpp	/^    BOOL mCoroutine;$/;"	m	struct:sFunctionStruct	file:
mCoroutineTop	src/common.h	/^    BOOL mCoroutineTop;$/;"	m	struct:sVarTableStruct
mCreateLVTable	src/common.h	/^            BOOL mCreateLVTable;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mDummyHeap	src/common.h	/^    BOOL mDummyHeap;$/;"	m	struct:sNodeTypeStruct
mDynamicArrayNum	src/common.h	/^    unsigned int mDynamicArrayNum;$/;"	m	struct:sNodeTypeStruct
mElifBlocks	src/common.h	/^            unsigned int mElifBlocks[ELIF_NUM_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon14
mElifExps	src/common.h	/^            unsigned int mElifExps[ELIF_NUM_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon14
mElifNum	src/common.h	/^            int mElifNum;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon14
mElseBlock	src/common.h	/^            unsigned int mElseBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon14
mExpression	src/common.h	/^            unsigned int mExpression;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon24
mExpression	src/common.h	/^            unsigned int mExpression;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon25
mExpressionNode	src/common.h	/^            unsigned int mExpressionNode;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon22
mExpressionNode	src/common.h	/^            unsigned int mExpressionNode;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon23
mExpressionNode2	src/common.h	/^            unsigned int mExpressionNode2;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon22
mExpressionNode3	src/common.h	/^            unsigned int mExpressionNode3;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon22
mExtern	src/common.h	/^            BOOL mExtern;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon18
mExternal	src/common.h	/^            BOOL mExternal;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mExternal	src/compile.cpp	/^    BOOL mExternal;$/;"	m	struct:sFunctionStruct	file:
mFields	src/common.h	/^            unsigned int mFields;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon17
mFields	src/common.h	/^    struct sNodeTypeStruct* mFields[STRUCT_FIELD_MAX];$/;"	m	struct:sCLClassStruct	typeref:struct:sCLClassStruct::sNodeTypeStruct
mFinalizeGenericsFunNum	src/common.h	/^    int mFinalizeGenericsFunNum;$/;"	m	struct:sNodeTypeStruct
mFirstCase	src/common.h	/^            BOOL mFirstCase;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon25
mFirstStatment	src/common.h	/^            unsigned int mFirstStatment;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon25
mFlags	src/common.h	/^    clint64 mFlags;$/;"	m	struct:sCLClassStruct
mForNodeBlock	src/common.h	/^            unsigned int mForNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon22
mFreed	src/common.h	/^    BOOL mFreed;$/;"	m	struct:sClassTableStruct
mFunName	src/common.h	/^            char mFunName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mGenerics	src/common.h	/^            BOOL mGenerics;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon17
mGenerics	src/common.h	/^            BOOL mGenerics;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mGenerics	src/compile.cpp	/^    BOOL mGenerics;$/;"	m	struct:sFunctionStruct	file:
mGenericsNum	src/common.h	/^    int mGenericsNum;$/;"	m	struct:sCLClassStruct
mGenericsTypes	src/common.h	/^    struct sNodeTypeStruct* mGenericsTypes[GENERICS_TYPES_MAX];$/;"	m	struct:sNodeTypeStruct	typeref:struct:sNodeTypeStruct::sNodeTypeStruct
mGlobal	src/common.h	/^            BOOL mGlobal;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon18
mGlobal	src/common.h	/^            BOOL mGlobal;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon21
mGlobal	src/common.h	/^            BOOL mGlobal;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon6
mGlobal	src/common.h	/^    BOOL mGlobal;$/;"	m	struct:sVarStruct
mHeap	src/common.h	/^    BOOL mHeap;$/;"	m	struct:sNodeTypeStruct
mID	src/common.h	/^    int mID;$/;"	m	struct:sVarTableStruct
mID	src/compile.cpp	/^    char mID[VAR_NAME_MAX];$/;"	m	struct:sFunctionStruct	file:
mIfBlock	src/common.h	/^            unsigned int mIfBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon14
mIfExp	src/common.h	/^            unsigned int mIfExp;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon14
mIndex	src/common.h	/^            unsigned int mIndex[ARRAY_DIMENTION_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon19
mIndex	src/common.h	/^            unsigned int mIndex[ARRAY_DIMENTION_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon20
mIndex	src/common.h	/^    int mIndex;$/;"	m	struct:sVarStruct
mInherit	src/common.h	/^            BOOL mInherit;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mInherit	src/common.h	/^            BOOL mInherit;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mInherit	src/compile.cpp	/^    BOOL mInherit;$/;"	m	struct:sFunctionStruct	file:
mInitialized	src/common.h	/^    BOOL mInitialized;$/;"	m	struct:sClassTableStruct
mInline	src/common.h	/^            BOOL mInline;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mInline	src/compile.cpp	/^    BOOL mInline;$/;"	m	struct:sFunctionStruct	file:
mIntValue	src/common.h	/^        int mIntValue;$/;"	m	union:sNodeTreeStruct::__anon4
mItem	src/common.h	/^    sCLClass* mItem;$/;"	m	struct:sClassTableStruct
mItem	src/typedef.c	/^    char mItem[VAR_NAME_MAX];$/;"	m	struct:sTypeDefTable	file:
mLLVMFunction	src/compile.cpp	/^    Function* mLLVMFunction;$/;"	m	struct:sFunctionStruct	file:
mLLVMValue	src/common.h	/^    void* mLLVMValue;$/;"	m	struct:sVarStruct
mLVTable	src/common.h	/^            sVarTable* mLVTable;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mLVTable	src/common.h	/^            sVarTable* mLVTable;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mLVTable	src/compile.cpp	/^    sVarTable* mLVTable;$/;"	m	struct:sFunctionStruct	file:
mLambdaCall	src/common.h	/^            BOOL mLambdaCall;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mLastCase	src/common.h	/^            BOOL mLastCase;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon25
mLastStatment	src/common.h	/^            unsigned int mLastStatment;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon25
mLeft	src/common.h	/^    unsigned int mLeft;$/;"	m	struct:sNodeTreeStruct
mLen	src/buffer.h	/^    int mLen;$/;"	m	struct:sBufStruct
mLine	src/common.h	/^    int mLine;$/;"	m	struct:sNodeTreeStruct
mLocalVariables	src/common.h	/^    sVar mLocalVariables[LOCAL_VARIABLE_MAX];  \/\/ open address hash$/;"	m	struct:sVarTableStruct
mMaxBlockVarNum	src/common.h	/^    int mMaxBlockVarNum;$/;"	m	struct:sVarTableStruct
mMessagePassing	src/common.h	/^            BOOL mMessagePassing;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mMethodGenerics	src/common.h	/^            BOOL mMethodGenerics;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mMethodGenerics	src/compile.cpp	/^    BOOL mMethodGenerics;$/;"	m	struct:sFunctionStruct	file:
mMethodGenericsNum	src/common.h	/^    int mMethodGenericsNum;$/;"	m	struct:sCLClassStruct
mMiddle	src/common.h	/^    unsigned int mMiddle;$/;"	m	struct:sNodeTreeStruct
mName	src/common.h	/^            char mName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon17
mName	src/common.h	/^            char mName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon28
mName	src/common.h	/^            char mName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mName	src/common.h	/^    char mName[VAR_NAME_MAX];$/;"	m	struct:sCLClassStruct
mName	src/common.h	/^    char mName[VAR_NAME_MAX];$/;"	m	struct:sParserParamStruct
mName	src/common.h	/^    char mName[VAR_NAME_MAX];$/;"	m	struct:sVarStruct
mName	src/common.h	/^    char* mName;$/;"	m	struct:sClassTableStruct
mName	src/compile.cpp	/^    char mName[VAR_NAME_MAX];$/;"	m	struct:sFunctionStruct	file:
mName	src/typedef.c	/^    char mName[VAR_NAME_MAX];$/;"	m	struct:sTypeDefTable	file:
mNameFields	src/common.h	/^            char mNameFields[STRUCT_FIELD_MAX][VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon16
mNameFields	src/common.h	/^    char mNameFields[STRUCT_FIELD_MAX][VAR_NAME_MAX];$/;"	m	struct:sCLClassStruct
mNext	src/common.h	/^    struct sVarTableStruct* mNext;              \/\/ for free var table$/;"	m	struct:sVarTableStruct	typeref:struct:sVarTableStruct::sVarTableStruct
mNextClass	src/common.h	/^    struct sClassTableStruct* mNextClass;$/;"	m	struct:sClassTableStruct	typeref:struct:sClassTableStruct::sClassTableStruct
mNoHeap	src/common.h	/^    BOOL mNoHeap;$/;"	m	struct:sNodeTypeStruct
mNodeBlock	src/common.h	/^            unsigned int mNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mNodeBlock	src/compile.cpp	/^    unsigned int mNodeBlock;$/;"	m	struct:sFunctionStruct	file:
mNodeType	src/common.h	/^    enum eNodeType mNodeType;$/;"	m	struct:sNodeTreeStruct	typeref:enum:sNodeTreeStruct::eNodeType
mNodes	src/common.h	/^            unsigned int* mNodes;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mNullable	src/common.h	/^    BOOL mNullable;$/;"	m	struct:sNodeTypeStruct
mNumArrayValue	src/common.h	/^            int mNumArrayValue;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon21
mNumFields	src/common.h	/^            int mNumFields;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon16
mNumFields	src/common.h	/^    int mNumFields;$/;"	m	struct:sCLClassStruct
mNumFields	src/common.h	/^    int mNumFields;$/;"	m	struct:sNodeTypeStruct
mNumGenericsTypes	src/common.h	/^    int mNumGenericsTypes;$/;"	m	struct:sNodeTypeStruct
mNumNodes	src/common.h	/^            unsigned int mNumNodes;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon12
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon13
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mNumParams	src/common.h	/^            int mNumParams;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mNumParams	src/common.h	/^    int mNumParams;$/;"	m	struct:sNodeTypeStruct
mNumParams	src/compile.cpp	/^    int mNumParams;$/;"	m	struct:sFunctionStruct	file:
mNumSwitchExpression	src/common.h	/^            int mNumSwitchExpression;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon24
mNumVarTables	src/vtable.c	/^static int mNumVarTables = 0;$/;"	v	file:
mParamNames	src/compile.cpp	/^    char mParamNames[PARAMS_MAX][VAR_NAME_MAX];$/;"	m	struct:sFunctionStruct	file:
mParamTypes	src/common.h	/^    struct sNodeTypeStruct* mParamTypes[PARAMS_MAX];$/;"	m	struct:sNodeTypeStruct	typeref:struct:sNodeTypeStruct::sNodeTypeStruct
mParamTypes	src/compile.cpp	/^    char mParamTypes[PARAMS_MAX][VAR_NAME_MAX];$/;"	m	struct:sFunctionStruct	file:
mParams	src/common.h	/^            sParserParam mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon12
mParams	src/common.h	/^            sParserParam mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mParams	src/common.h	/^            unsigned int mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon13
mParams	src/common.h	/^            unsigned mParams[PARAMS_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mParent	src/common.h	/^    struct sVarTableStruct* mParent;            \/\/ make linked list$/;"	m	struct:sVarTableStruct	typeref:struct:sVarTableStruct::sVarTableStruct
mPointerNum	src/common.h	/^    int mPointerNum;$/;"	m	struct:sNodeTypeStruct
mRealFunName	src/common.h	/^            char mRealFunName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon9
mRegister	src/common.h	/^    BOOL mRegister;$/;"	m	struct:sNodeTypeStruct
mResultType	src/common.h	/^    struct sNodeTypeStruct* mResultType;$/;"	m	struct:sNodeTypeStruct	typeref:struct:sNodeTypeStruct::sNodeTypeStruct
mResultTypeName	src/common.h	/^            char mResultTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mResultTypeName	src/compile.cpp	/^    char mResultTypeName[VAR_NAME_MAX];$/;"	m	struct:sFunctionStruct	file:
mRight	src/common.h	/^    unsigned int mRight;$/;"	m	struct:sNodeTreeStruct
mSName	src/common.h	/^    char mSName[PATH_MAX];$/;"	m	struct:sNodeTreeStruct
mSize	src/buffer.h	/^    int mSize;$/;"	m	struct:sBufStruct
mSizeNodes	src/common.h	/^            unsigned int mSizeNodes;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mSizeNum	src/common.h	/^    int mSizeNum;$/;"	m	struct:sNodeTypeStruct
mSource	src/common.h	/^            sBuf mSource;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon5
mStatic	src/common.h	/^            BOOL mStatic;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mStatic	src/common.h	/^    BOOL mStatic;$/;"	m	struct:sNodeTypeStruct
mStatic	src/compile.cpp	/^    BOOL mStatic;$/;"	m	struct:sFunctionStruct	file:
mStrValue	src/common.h	/^        char mStrValue[512];$/;"	m	union:sNodeTreeStruct::__anon4
mSwitchExpression	src/common.h	/^            unsigned int mSwitchExpression[SWITCH_STASTMENT_NODE_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon24
mType	src/common.h	/^    sNodeType* mType;$/;"	m	struct:sParserParamStruct
mType	src/common.h	/^    sNodeType* mType;$/;"	m	struct:sVarStruct
mTypeFields	src/common.h	/^            char mTypeFields[STRUCT_FIELD_MAX][VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon16
mTypeName	src/common.h	/^            char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon15
mTypeName	src/common.h	/^            char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon18
mTypeName	src/common.h	/^            char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon26
mTypeName	src/common.h	/^            char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon27
mTypeName	src/common.h	/^            char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon28
mTypeName	src/common.h	/^            char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon6
mTypeName	src/common.h	/^    char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sNodeTypeStruct
mTypeName	src/common.h	/^    char mTypeName[VAR_NAME_MAX];$/;"	m	struct:sParserParamStruct
mTypeOfExpression	src/common.h	/^    unsigned int mTypeOfExpression;$/;"	m	struct:sNodeTypeStruct
mTypePointerNum	src/common.h	/^    int mTypePointerNum;$/;"	m	struct:sNodeTypeStruct
mUndefinedStructType	src/common.h	/^    void* mUndefinedStructType;$/;"	m	struct:sCLClassStruct
mUnsigned	src/common.h	/^    BOOL mUnsigned;$/;"	m	struct:sNodeTypeStruct
mVarArg	src/common.h	/^            BOOL mVarArg;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon8
mVarArg	src/compile.cpp	/^    BOOL mVarArg;$/;"	m	struct:sFunctionStruct	file:
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon10
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon11
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon18
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon21
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon27
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon6
mVarName	src/common.h	/^            char mVarName[VAR_NAME_MAX];$/;"	m	struct:sNodeTreeStruct::__anon4::__anon7
mVarNum	src/common.h	/^    int mVarNum;$/;"	m	struct:sVarTableStruct
mVersion	src/compile.cpp	/^    int mVersion;$/;"	m	struct:sFunctionStruct	file:
mVolatile	src/common.h	/^    BOOL mVolatile;$/;"	m	struct:sNodeTypeStruct
mWhileNodeBlock	src/common.h	/^            unsigned int mWhileNodeBlock;$/;"	m	struct:sNodeTreeStruct::__anon4::__anon23
main	a.c	/^int main() {$/;"	f
main	code/HelloWorld.c	/^int main() $/;"	f
main	src/main.c	/^int main(int argc, char** argv)$/;"	f
mandir	Makefile	/^mandir=${datarootdir}\/man$/;"	m
mem	src/memalloc-stdc.c	/^    void* mem;$/;"	m	struct:sHeapDebug	file:
method_generics_types	lex.yy.c	/^char method_generics_types[GENERICS_TYPES_MAX][VAR_NAME_MAX];$/;"	v
method_generics_types	parser.tab.c	/^char method_generics_types[GENERICS_TYPES_MAX][VAR_NAME_MAX];$/;"	v
method_generics_types	src/parser.y	/^method_generics_types: {$/;"	l
mystrncpy	src/memalloc-stdc.c	/^char* mystrncpy(char* des, char* src, int size)$/;"	f
nccalloc	src/memalloc-stdc.c	/^void *nccalloc(long long num, long long nsize)$/;"	f
ncfree	src/memalloc-stdc.c	/^void ncfree(void *block)$/;"	f
ncmalloc	src/memalloc-stdc.c	/^void *ncmalloc(long long size)$/;"	f
ncmalloc_usable_size	src/memalloc-stdc.c	/^long long ncmalloc_usable_size(void* block)$/;"	f
ncmemcpy	src/memalloc-stdc.c	/^void* ncmemcpy(void* mem, void* mem2, long long int size)$/;"	f
ncmemdup	src/memalloc-stdc.c	/^void *ncmemdup(void *block)$/;"	f
ncrealloc	src/memalloc-stdc.c	/^void *ncrealloc(void *block, long long int size)$/;"	f
new_right_value_objects_container	src/compile.cpp	/^void* new_right_value_objects_container(sCompileInfo* info)$/;"	f
no_output	src/common.h	/^    BOOL no_output;$/;"	m	struct:sCompileInfoStruct
node	parser.tab.c	/^    unsigned int node;$/;"	m	union:YYSTYPE	file:
node	parser.tab.h	/^    unsigned int node;$/;"	m	union:YYSTYPE
node	src/parser.y	/^node: source_point_macro exp {$/;"	l
num_array_value	parser.tab.c	/^int num_array_value;$/;"	v
num_function_generics_types	parser.tab.c	/^int num_function_generics_types = 0;$/;"	v
num_loop	src/common.h	/^    int num_loop;$/;"	m	struct:sCompileInfoStruct
num_loop2	src/common.h	/^    int num_loop2;$/;"	m	struct:sCompileInfoStruct
num_method_generics_types	parser.tab.c	/^int num_method_generics_types = 0;$/;"	v
num_prev_block	parser.tab.c	/^int num_prev_block = 0;$/;"	v
num_struct_generics_types	parser.tab.c	/^int num_struct_generics_types = 0;$/;"	v
num_switch_expression	parser.tab.c	/^unsigned int num_switch_expression;$/;"	v
num_variable_names	parser.tab.c	/^int num_variable_names = 0;$/;"	v
object	parser.tab.c	/^unsigned int object;$/;"	v
oror_result_var	src/common.h	/^    void* oror_result_var;$/;"	m	struct:sCompileInfoStruct
output_native_code	src/compile.cpp	/^static void output_native_code()$/;"	f	file:
p	lex.yy.c	/^char* p;$/;"	v
params	parser.tab.c	/^unsigned int params;$/;"	v
params	src/parser.y	/^params: { $/;"	l
parse_class_name	src/node_type.c	/^static sNodeType* parse_class_name(char** p, char** p2, char* buf)$/;"	f	file:
parser_err_msg	src/main.c	/^void parser_err_msg(char* msg)$/;"	f
pointer	src/parser.y	/^pointer: $/;"	l
pre_compile	src/compile.cpp	/^BOOL pre_compile(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_add	src/compile.cpp	/^static BOOL pre_compile_add(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_and	src/compile.cpp	/^static BOOL pre_compile_and(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_and_and	src/compile.cpp	/^static BOOL pre_compile_and_and(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_and_eq	src/compile.cpp	/^static BOOL pre_compile_and_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_array_initializer	src/compile.cpp	/^BOOL pre_compile_array_initializer(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_block	src/compile.cpp	/^BOOL pre_compile_block(unsigned int node_block, sCompileInfo* info)$/;"	f
pre_compile_break_expression	src/compile.cpp	/^BOOL pre_compile_break_expression(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_case_expression	src/compile.cpp	/^BOOL pre_compile_case_expression(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_cast	src/compile.cpp	/^BOOL pre_compile_cast(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_char_value	src/compile.cpp	/^static BOOL pre_compile_char_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_clone	src/compile.cpp	/^static BOOL pre_compile_clone(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_complement	src/compile.cpp	/^static BOOL pre_compile_complement(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_conditional	src/compile.cpp	/^BOOL pre_compile_conditional(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_continue_expression	src/compile.cpp	/^BOOL pre_compile_continue_expression(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_coroutine	src/compile.cpp	/^BOOL pre_compile_coroutine(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_create_object	src/compile.cpp	/^static BOOL pre_compile_create_object(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_define_variable	src/compile.cpp	/^static BOOL pre_compile_define_variable(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_dereffernce	src/compile.cpp	/^static BOOL pre_compile_dereffernce(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_div	src/compile.cpp	/^static BOOL pre_compile_div(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_div_eq	src/compile.cpp	/^static BOOL pre_compile_div_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_do_while_statment	src/compile.cpp	/^static BOOL pre_compile_do_while_statment(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_equals	src/compile.cpp	/^static BOOL pre_compile_equals(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_external_function	src/compile.cpp	/^BOOL pre_compile_external_function(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_false	src/compile.cpp	/^static BOOL pre_compile_false(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_for_statment	src/compile.cpp	/^static BOOL pre_compile_for_statment(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_function	src/compile.cpp	/^BOOL pre_compile_function(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_function_call	src/compile.cpp	/^BOOL pre_compile_function_call(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_ge	src/compile.cpp	/^static BOOL pre_compile_ge(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_gt	src/compile.cpp	/^static BOOL pre_compile_gt(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_if	src/compile.cpp	/^static BOOL pre_compile_if(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_int_value	src/compile.cpp	/^static BOOL pre_compile_int_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_le	src/compile.cpp	/^static BOOL pre_compile_le(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_load_element	src/compile.cpp	/^static BOOL pre_compile_load_element(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_load_field	src/compile.cpp	/^static BOOL pre_compile_load_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_load_variable	src/compile.cpp	/^static BOOL pre_compile_load_variable(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_logical_denial	src/compile.cpp	/^static BOOL pre_compile_logical_denial(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_lshift	src/compile.cpp	/^static BOOL pre_compile_lshift(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_lshift_eq	src/compile.cpp	/^static BOOL pre_compile_lshift_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_lt	src/compile.cpp	/^static BOOL pre_compile_lt(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_minus_eq	src/compile.cpp	/^static BOOL pre_compile_minus_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_mod	src/compile.cpp	/^static BOOL pre_compile_mod(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_mod_eq	src/compile.cpp	/^static BOOL pre_compile_mod_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_mult	src/compile.cpp	/^static BOOL pre_compile_mult(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_mult_eq	src/compile.cpp	/^static BOOL pre_compile_mult_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_not_equals	src/compile.cpp	/^static BOOL pre_compile_not_equals(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_or	src/compile.cpp	/^static BOOL pre_compile_or(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_or_eq	src/compile.cpp	/^static BOOL pre_compile_or_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_or_or	src/compile.cpp	/^static BOOL pre_compile_or_or(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_plus_eq	src/compile.cpp	/^static BOOL pre_compile_plus_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_reffernce	src/compile.cpp	/^static BOOL pre_compile_reffernce(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_return	src/compile.cpp	/^static BOOL pre_compile_return(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_rshift	src/compile.cpp	/^static BOOL pre_compile_rshift(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_rshift_eq	src/compile.cpp	/^static BOOL pre_compile_rshift_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_sizeof1	src/compile.cpp	/^static BOOL pre_compile_sizeof1(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_sizeof2	src/compile.cpp	/^BOOL pre_compile_sizeof2(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_store_element	src/compile.cpp	/^BOOL pre_compile_store_element(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_store_field	src/compile.cpp	/^static BOOL pre_compile_store_field(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_store_variable	src/compile.cpp	/^BOOL pre_compile_store_variable(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_str_value	src/compile.cpp	/^static BOOL pre_compile_str_value(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_struct	src/compile.cpp	/^BOOL pre_compile_struct(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_sub	src/compile.cpp	/^static BOOL pre_compile_sub(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_switch_statment	src/compile.cpp	/^BOOL pre_compile_switch_statment(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_true	src/compile.cpp	/^static BOOL pre_compile_true(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_typedef	src/compile.cpp	/^BOOL pre_compile_typedef(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_union	src/compile.cpp	/^BOOL pre_compile_union(unsigned int node, sCompileInfo* info)$/;"	f
pre_compile_while_statment	src/compile.cpp	/^static BOOL pre_compile_while_statment(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_xor	src/compile.cpp	/^static BOOL pre_compile_xor(unsigned int node, sCompileInfo* info)$/;"	f	file:
pre_compile_xor_eq	src/compile.cpp	/^static BOOL pre_compile_xor_eq(unsigned int node, sCompileInfo* info)$/;"	f	file:
prefix	Makefile	/^prefix=\/usr\/local$/;"	m
prepare_elif_statment	src/parser.y	/^prepare_elif_statment: '(' comma_exp ')' '{' block '}' block_end {$/;"	l
prev_block	parser.tab.c	/^unsigned int prev_block[BLOCK_NEST_MAX];$/;"	v
program	src/parser.y	/^program:$/;"	l
prototypes	configure	/^   function prototypes and stuff, but not '\\xHH' hex character constants.$/;"	f
push_value_to_stack_ptr	src/compile.cpp	/^void push_value_to_stack_ptr(LVALUE* value, sCompileInfo* info)$/;"	f
put_class_to_table	src/klass.c	/^static BOOL put_class_to_table(const char* class_name_, sCLClass* klass)$/;"	f	file:
real_fun_name	src/memalloc-stdc.c	/^    char real_fun_name[128];$/;"	m	struct:sHeapDebug	file:
remove_class	src/klass.c	/^static void remove_class(const char* class_name_)$/;"	f	file:
remove_from_right_value_object	src/compile.cpp	/^void remove_from_right_value_object(Value* value, sCompileInfo* info)$/;"	f
restore_right_value_objects_container	src/compile.cpp	/^void restore_right_value_objects_container(void* right_value_objects, sCompileInfo* info)$/;"	f
restore_var_table	src/vtable.c	/^void restore_var_table(sVarTable* left, sVarTable* right)$/;"	f
restrict	src/parser.y	/^restrict: {$/;"	l
right_value_objects	src/common.h	/^    void* right_value_objects;$/;"	m	struct:sCompileInfoStruct
rval	parser.tab.c	/^    int rval;$/;"	m	union:YYSTYPE	file:
rval	parser.tab.h	/^    int rval;$/;"	m	union:YYSTYPE
sArrayInitializer	src/common.h	/^        } sArrayInitializer;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon21
sBlock	src/common.h	/^        } sBlock;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon5
sBuf	src/buffer.h	/^typedef struct sBufStruct sBuf;$/;"	t	typeref:struct:sBufStruct
sBufStruct	src/buffer.h	/^struct sBufStruct {$/;"	s
sBuf_append	src/buffer.c	/^void sBuf_append(sBuf* self, void* str, size_t size)$/;"	f
sBuf_append_char	src/buffer.c	/^void sBuf_append_char(sBuf* self, char c)$/;"	f
sBuf_append_int	src/buffer.c	/^void sBuf_append_int(sBuf* self, int value)$/;"	f
sBuf_append_long	src/buffer.c	/^void sBuf_append_long(sBuf* self, long long value)$/;"	f
sBuf_append_str	src/buffer.c	/^void sBuf_append_str(sBuf* self, char* str)$/;"	f
sBuf_clone	src/buffer.c	/^void sBuf_clone(sBuf* self, sBuf* buf)$/;"	f
sBuf_init	src/buffer.c	/^void sBuf_init(sBuf* self)$/;"	f
sCLClass	src/common.h	/^typedef struct sCLClassStruct sCLClass;$/;"	t	typeref:struct:sCLClassStruct
sCLClassStruct	src/common.h	/^struct sCLClassStruct {$/;"	s
sCase	src/common.h	/^        } sCase;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon25
sCast	src/common.h	/^        } sCast;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon26
sClassTable	src/common.h	/^typedef struct sClassTableStruct sClassTable;$/;"	t	typeref:struct:sClassTableStruct
sClassTableStruct	src/common.h	/^struct sClassTableStruct$/;"	s
sCompileInfo	src/common.h	/^typedef struct sCompileInfoStruct sCompileInfo;$/;"	t	typeref:struct:sCompileInfoStruct
sCompileInfoStruct	src/common.h	/^struct sCompileInfoStruct$/;"	s
sCreateObject	src/common.h	/^        } sCreateObject;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon15
sDataType	code/HelloWorld.c	/^typedef struct sData sDataType;$/;"	t	typeref:struct:sData	file:
sDefineVariable	src/common.h	/^        } sDefineVariable;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon18
sFields	src/common.h	/^        } sFields;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon16
sFor	src/common.h	/^        } sFor;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon22
sFunction	src/common.h	/^        } sFunction;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon8
sFunction	src/compile.cpp	/^typedef sFunctionStruct sFunction;$/;"	t	file:
sFunctionCall	src/common.h	/^        } sFunctionCall;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon9
sFunctionParams	src/common.h	/^        } sFunctionParams;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon12
sFunctionStruct	src/compile.cpp	/^struct sFunctionStruct {$/;"	s	file:
sHeapDebug	src/memalloc-stdc.c	/^struct sHeapDebug {$/;"	s	file:
sIf	src/common.h	/^        } sIf;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon14
sLoadElement	src/common.h	/^        } sLoadElement;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon20
sLoadField	src/common.h	/^        } sLoadField;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon10
sLoadVariable	src/common.h	/^        } sLoadVariable;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon7
sNodeTree	src/common.h	/^typedef struct sNodeTreeStruct sNodeTree;$/;"	t	typeref:struct:sNodeTreeStruct
sNodeTreeStruct	src/common.h	/^struct sNodeTreeStruct $/;"	s
sNodeTree_case_expression	src/node.c	/^unsigned int sNodeTree_case_expression(unsigned int expression_node, BOOL first_case, BOOL last_case, BOOL case_after_return, unsigned int first_statment, BOOL last_statment, char* sname, int sline)$/;"	f
sNodeTree_create_add	src/node.c	/^unsigned int sNodeTree_create_add(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_and	src/node.c	/^unsigned int sNodeTree_create_and(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_and_and	src/node.c	/^unsigned int sNodeTree_create_and_and(unsigned int left_node, unsigned int right_node, char* sname, int sline)$/;"	f
sNodeTree_create_and_eq	src/node.c	/^unsigned int sNodeTree_create_and_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_array_initializer	src/node.c	/^unsigned int sNodeTree_create_array_initializer(int left, char* var_name, int num_array_value, unsigned int* array_values, BOOL global, char* sname, int sline)$/;"	f
sNodeTree_create_block	src/node.c	/^unsigned int sNodeTree_create_block(BOOL create_lv_table, char* sname, int sline)$/;"	f
sNodeTree_create_break_expression	src/node.c	/^unsigned int sNodeTree_create_break_expression(char* sname, int sline)$/;"	f
sNodeTree_create_c_string	src/node.c	/^unsigned int sNodeTree_create_c_string(char* value, char* sname, int sline)$/;"	f
sNodeTree_create_cast	src/node.c	/^unsigned int sNodeTree_create_cast(char* type_name, unsigned int left_node, char* sname, int sline)$/;"	f
sNodeTree_create_char_value	src/node.c	/^unsigned int sNodeTree_create_char_value(char value, char* sname, int sline)$/;"	f
sNodeTree_create_clone	src/node.c	/^unsigned int sNodeTree_create_clone(unsigned int left, char* sname, int sline)$/;"	f
sNodeTree_create_complement	src/node.c	/^unsigned int sNodeTree_create_complement(unsigned int left, char* sname, int sline)$/;"	f
sNodeTree_create_conditional	src/node.c	/^unsigned int sNodeTree_create_conditional(unsigned int conditional, unsigned int value1, unsigned int value2, char* sname, int sline)$/;"	f
sNodeTree_create_continue_expression	src/node.c	/^unsigned int sNodeTree_create_continue_expression(char* sname, int sline)$/;"	f
sNodeTree_create_coroutine	src/node.c	/^unsigned int sNodeTree_create_coroutine(unsigned int function_params, char* result_type_name, unsigned int node_block, BOOL var_arg, char* sname, int sline)$/;"	f
sNodeTree_create_define_variable	src/node.c	/^unsigned int sNodeTree_create_define_variable(char* type_name, char* var_name, BOOL global, BOOL extern_, char* sname, int sline)$/;"	f
sNodeTree_create_derefference	src/node.c	/^unsigned int sNodeTree_create_derefference(unsigned int left, char* sname, int sline)$/;"	f
sNodeTree_create_div	src/node.c	/^unsigned int sNodeTree_create_div(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_div_eq	src/node.c	/^unsigned int sNodeTree_create_div_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_equals	src/node.c	/^unsigned int sNodeTree_create_equals(unsigned int left, unsigned int right,  char* sname, int sline)$/;"	f
sNodeTree_create_external_function	src/node.c	/^unsigned int sNodeTree_create_external_function(char* fun_name, unsigned int function_params, char* result_type_name, BOOL var_arg, BOOL inherite_, char* sname, int sline)$/;"	f
sNodeTree_create_false	src/node.c	/^unsigned int sNodeTree_create_false(char* sname, int sline)$/;"	f
sNodeTree_create_function	src/node.c	/^unsigned int sNodeTree_create_function(unsigned int node, char* fun_name, char* fun_base_name, unsigned int function_params, char* result_type_name, unsigned int node_block, BOOL var_arg, BOOL inline_, BOOL static_, BOOL inherit_, BOOL generics, BOOL method_generics, char* sname, int sline)$/;"	f
sNodeTree_create_function_call	src/node.c	/^unsigned int sNodeTree_create_function_call(char* fun_name, unsigned int params, BOOL message_passing, BOOL inherit_, char* sname, int sline)$/;"	f
sNodeTree_create_function_params	src/node.c	/^unsigned int sNodeTree_create_function_params(char* sname, int sline)$/;"	f
sNodeTree_create_ge	src/node.c	/^unsigned int sNodeTree_create_ge(unsigned int left, unsigned int right,  char* sname, int sline)$/;"	f
sNodeTree_create_gt	src/node.c	/^unsigned int sNodeTree_create_gt(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_if	src/node.c	/^unsigned int sNodeTree_create_if(unsigned int if_exp, unsigned int if_block, int elif_num, unsigned int* elif_exps, unsigned int* elif_blocks, unsigned int else_block, char* sname, int sline)$/;"	f
sNodeTree_create_int_value	src/node.c	/^unsigned int sNodeTree_create_int_value(int value, char* sname, int sline)$/;"	f
sNodeTree_create_lambda_call	src/node.c	/^unsigned int sNodeTree_create_lambda_call(unsigned int lambda_node, unsigned int params, char* sname, int sline)$/;"	f
sNodeTree_create_le	src/node.c	/^unsigned int sNodeTree_create_le(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_load_array_element	src/node.c	/^unsigned int sNodeTree_create_load_array_element(unsigned int array, unsigned int index_node[], int num_dimention, char* sname, int sline)$/;"	f
sNodeTree_create_load_field	src/node.c	/^unsigned int sNodeTree_create_load_field(char* name, unsigned int left_node, char* sname, int sline)$/;"	f
sNodeTree_create_load_variable	src/node.c	/^unsigned int sNodeTree_create_load_variable(char* var_name, char* sname, int sline)$/;"	f
sNodeTree_create_logical_denial	src/node.c	/^unsigned int sNodeTree_create_logical_denial(unsigned int left, char* sname, int sline)$/;"	f
sNodeTree_create_lshift	src/node.c	/^unsigned int sNodeTree_create_lshift(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_lshift_eq	src/node.c	/^unsigned int sNodeTree_create_lshift_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_lt	src/node.c	/^unsigned int sNodeTree_create_lt(unsigned int left, unsigned int right,  char* sname, int sline)$/;"	f
sNodeTree_create_minus_eq	src/node.c	/^unsigned int sNodeTree_create_minus_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_mod	src/node.c	/^unsigned int sNodeTree_create_mod(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_mod_eq	src/node.c	/^unsigned int sNodeTree_create_mod_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_mult	src/node.c	/^unsigned int sNodeTree_create_mult(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_mult_eq	src/node.c	/^unsigned int sNodeTree_create_mult_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_not_equals	src/node.c	/^unsigned int sNodeTree_create_not_equals(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_object	src/node.c	/^unsigned int sNodeTree_create_object(char* type_name, unsigned int object_num, char* sname, int sline)$/;"	f
sNodeTree_create_or	src/node.c	/^unsigned int sNodeTree_create_or(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_or_eq	src/node.c	/^unsigned int sNodeTree_create_or_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_or_or	src/node.c	/^unsigned int sNodeTree_create_or_or(unsigned int left_node, unsigned int right_node, char* sname, int sline)$/;"	f
sNodeTree_create_params	src/node.c	/^unsigned int sNodeTree_create_params(char* sname, int sline)$/;"	f
sNodeTree_create_plus_eq	src/node.c	/^unsigned int sNodeTree_create_plus_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_refference	src/node.c	/^unsigned int sNodeTree_create_refference(unsigned int left, char* sname, int sline)$/;"	f
sNodeTree_create_return	src/node.c	/^unsigned int sNodeTree_create_return(unsigned int right, unsigned int middle, char* sname, int sline)$/;"	f
sNodeTree_create_rshift	src/node.c	/^unsigned int sNodeTree_create_rshift(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_rshift_eq	src/node.c	/^unsigned int sNodeTree_create_rshift_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_sizeof1	src/node.c	/^unsigned int sNodeTree_create_sizeof1(char* type_name, char* sname, int sline)$/;"	f
sNodeTree_create_sizeof2	src/node.c	/^unsigned int sNodeTree_create_sizeof2(char* var_name, char* sname, int sline)$/;"	f
sNodeTree_create_store_element	src/node.c	/^unsigned int sNodeTree_create_store_element(unsigned int array, unsigned int index_node[], int num_dimention, unsigned int right_node, char* sname, int sline)$/;"	f
sNodeTree_create_store_field	src/node.c	/^unsigned int sNodeTree_create_store_field(char* var_name, unsigned int left_node, unsigned int right_node, char* sname, int sline)$/;"	f
sNodeTree_create_store_variable	src/node.c	/^unsigned int sNodeTree_create_store_variable(char* var_name, char* type_name, unsigned int right, BOOL alloc, BOOL global, char* sname, int sline)$/;"	f
sNodeTree_create_struct	src/node.c	/^unsigned int sNodeTree_create_struct(char* struct_name, unsigned int fields, BOOL generics, BOOL anonymous, char* sname, int sline)$/;"	f
sNodeTree_create_struct_fields	src/node.c	/^unsigned int sNodeTree_create_struct_fields(char* sname, int sline)$/;"	f
sNodeTree_create_sub	src/node.c	/^unsigned int sNodeTree_create_sub(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_true	src/node.c	/^unsigned int sNodeTree_create_true(char* sname, int sline)$/;"	f
sNodeTree_create_typedef	src/node.c	/^unsigned int sNodeTree_create_typedef(char* name, char* type_name, char* sname, int sline)$/;"	f
sNodeTree_create_union	src/node.c	/^unsigned int sNodeTree_create_union(char* struct_name, unsigned int fields, BOOL anonymous, char* sname, int sline)$/;"	f
sNodeTree_create_xor	src/node.c	/^unsigned int sNodeTree_create_xor(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_create_xor_eq	src/node.c	/^unsigned int sNodeTree_create_xor_eq(unsigned int left, unsigned int right, char* sname, int sline)$/;"	f
sNodeTree_do_while_expression	src/node.c	/^unsigned int sNodeTree_do_while_expression(unsigned int expression_node, unsigned int while_node_block, char* sname, int sline)$/;"	f
sNodeTree_for_statment	src/node.c	/^unsigned int sNodeTree_for_statment(unsigned int expression_node1, unsigned int expression_node2, unsigned int expression_node3, unsigned int for_node_block, char* sname, int sline)$/;"	f
sNodeTree_pre_create_function	src/node.c	/^unsigned int sNodeTree_pre_create_function(unsigned int function_params, char* sname, int sline)$/;"	f
sNodeTree_switch_statment	src/node.c	/^unsigned int sNodeTree_switch_statment(unsigned int expression_node, int num_switch_expression, unsigned int* switch_expression, char* sname, int sline)$/;"	f
sNodeTree_while_statment	src/node.c	/^unsigned int sNodeTree_while_statment(unsigned int expression_node, unsigned int while_node_block, char* sname, int sline)$/;"	f
sNodeType	src/common.h	/^typedef struct sNodeTypeStruct sNodeType;$/;"	t	typeref:struct:sNodeTypeStruct
sNodeTypeStruct	src/common.h	/^struct sNodeTypeStruct {$/;"	s
sParams	src/common.h	/^        } sParams;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon13
sParserParam	src/common.h	/^typedef struct sParserParamStruct sParserParam;$/;"	t	typeref:struct:sParserParamStruct
sParserParamStruct	src/common.h	/^struct sParserParamStruct $/;"	s
sSizeOf	src/common.h	/^        } sSizeOf;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon27
sStoreElement	src/common.h	/^        } sStoreElement;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon19
sStoreField	src/common.h	/^        } sStoreField;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon11
sStoreVariable	src/common.h	/^        } sStoreVariable;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon6
sStruct	src/common.h	/^        } sStruct;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon17
sSwitch	src/common.h	/^        } sSwitch;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon24
sTypeDef	src/common.h	/^        } sTypeDef;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon28
sTypeDefTable	src/typedef.c	/^struct sTypeDefTable$/;"	s	file:
sVar	src/common.h	/^typedef struct sVarStruct sVar;$/;"	t	typeref:struct:sVarStruct
sVarStruct	src/common.h	/^struct sVarStruct {$/;"	s
sVarTable	src/common.h	/^typedef struct sVarTableStruct sVarTable;$/;"	t	typeref:struct:sVarTableStruct
sVarTableStruct	src/common.h	/^struct sVarTableStruct {$/;"	s
sWhile	src/common.h	/^        } sWhile;$/;"	m	union:sNodeTreeStruct::__anon4	typeref:struct:sNodeTreeStruct::__anon4::__anon23
setCurrentDebugLocation	src/compile.cpp	/^void setCurrentDebugLocation(int sline)$/;"	f
set_max_block_var_num	src/vtable.c	/^void set_max_block_var_num(sVarTable* lv_table, sVarTable* old_table)$/;"	f
sharedstatedir	Makefile	/^sharedstatedir=${prefix}\/com$/;"	m
short	parser.tab.c	271;"	d	file:
show_node	src/node.c	/^void show_node(unsigned int node)$/;"	f
show_node_type	src/node_type.c	/^void show_node_type(sNodeType* type)$/;"	f
show_type_core	src/node_type.c	/^void show_type_core(sNodeType* type) $/;"	f
show_vtable	src/vtable.c	/^void show_vtable(sVarTable* table)$/;"	f
show_vtable_current_only	src/vtable.c	/^void show_vtable_current_only(sVarTable* table)$/;"	f
size_t	code/HelloWorld.c	/^typedef long unsigned int size_t;$/;"	t	file:
skip_spaces_for_parse_class_name	src/node_type.c	/^static void skip_spaces_for_parse_class_name(char** p) $/;"	f	file:
sline	src/common.h	/^    int sline;$/;"	m	struct:sCompileInfoStruct
sline	src/memalloc-stdc.c	/^    int sline;$/;"	m	struct:sHeapDebug	file:
sname	src/common.h	/^    char sname[PATH_MAX];$/;"	m	struct:sCompileInfoStruct
sname	src/memalloc-stdc.c	/^    char sname[128];$/;"	m	struct:sHeapDebug	file:
solve_generics	src/node_type.c	/^BOOL solve_generics(sNodeType** node_type, sNodeType* generics_type, BOOL* success_volve)$/;"	f
solve_method_generics	src/compile.cpp	/^static void solve_method_generics(char* node_type, char** method_generics_types)$/;"	f	file:
solve_method_generics	src/node_type.c	/^BOOL solve_method_generics(sNodeType** node_type, int num_method_generics_types, sNodeType* method_generics_types[GENERICS_TYPES_MAX])$/;"	f
solve_typeof	src/node_type.c	/^BOOL solve_typeof(sNodeType** node_type, struct sCompileInfoStruct* info)$/;"	f
solve_undefined_strcut_type	src/compile.cpp	/^static BOOL solve_undefined_strcut_type(sNodeType* node_type, sNodeType* generics_type, char* real_struct_name, sCompileInfo* info)$/;"	f	file:
source_point_macro	src/parser.y	/^source_point_macro: '#' INTNUM CSTRING {$/;"	l
stack_num	src/common.h	/^    int stack_num;$/;"	m	struct:sCompileInfoStruct
start_to_make_native_code	src/compile.cpp	/^static void start_to_make_native_code()$/;"	f	file:
static_	parser.tab.c	/^BOOL static_ = FALSE;$/;"	v
statment	src/parser.y	/^statment: comma_exp ';'              { $$ = $1; }$/;"	l
std_move	src/compile.cpp	/^void std_move(Value* var_address, sNodeType* lvar_type, LVALUE* rvalue, BOOL alloc, sCompileInfo* info)$/;"	f
store_address_to_lvtable	src/compile.cpp	/^void store_address_to_lvtable(int index, Value* address, sCompileInfo* info)$/;"	f
str	lex.yy.c	796;"	d	file:
string	code/HelloWorld.c	/^inline char*% string(char* str) $/;"	f
string2	code/HelloWorld.c	/^char*% string2(char*% str) $/;"	f
string_test1	code/HelloWorld.c	/^char*% string_test1(char*% var) $/;"	f
struct_	src/parser.y	/^struct_: $/;"	l
struct_generics_types	lex.yy.c	/^char struct_generics_types[GENERICS_TYPES_MAX][VAR_NAME_MAX];$/;"	v
struct_generics_types	parser.tab.c	/^char struct_generics_types[GENERICS_TYPES_MAX][VAR_NAME_MAX];$/;"	v
struct_generics_types	src/parser.y	/^struct_generics_types: {$/;"	l
sub_array	src/parser.y	/^sub_array: $/;"	l
sub_array_init	src/parser.y	/^sub_array_init: {$/;"	l
substitution_posibility	src/node_type.c	/^BOOL substitution_posibility(sNodeType* left_type, sNodeType* right_type, BOOL no_output)$/;"	f
sval	parser.tab.c	/^    char sval[512];$/;"	m	union:YYSTYPE	file:
sval	parser.tab.h	/^    char sval[512];$/;"	m	union:YYSTYPE
switch_block	src/parser.y	/^switch_block: statment {$/;"	l
switch_expression	parser.tab.c	/^unsigned int switch_expression[SWITCH_STASTMENT_NODE_MAX];$/;"	v
switch_expression	src/common.h	/^    void* switch_expression;$/;"	m	struct:sCompileInfoStruct
switch_expression_type	src/common.h	/^    sNodeType* switch_expression_type;$/;"	m	struct:sCompileInfoStruct
sysconfdir	Makefile	/^sysconfdir=${prefix}\/etc\/neo-c2$/;"	m
type	src/common.h	/^    sNodeType* type;$/;"	m	struct:sCompileInfoStruct
type	src/compile.cpp	/^    sNodeType* type;$/;"	m	struct:LVALUEStruct	file:
type	src/parser.y	/^type:$/;"	l
type_and_variable_name	src/parser.y	/^type_and_variable_name: $/;"	l
type_attribute	src/parser.y	/^type_attribute: $/;"	l
type_attribute2	src/parser.y	/^type_attribute2: {$/;"	l
type_attribute2_core	src/parser.y	/^type_attribute2_core: $/;"	l
type_identify	src/node_type.c	/^BOOL type_identify(sNodeType* left, sNodeType* right)$/;"	f
type_identify_with_class_name	src/node_type.c	/^BOOL type_identify_with_class_name(sNodeType* left, const char* right_class_name)$/;"	f
type_name	src/memalloc-stdc.c	/^    char type_name[128];$/;"	m	struct:sHeapDebug	file:
type_name	src/parser.y	/^type_name: $/;"	l
type_params	parser.tab.c	/^char type_params[VAR_NAME_MAX];$/;"	v
type_params	src/parser.y	/^type_params: {$/;"	l
typedef_	src/parser.y	/^typedef_: $/;"	l
typedef_attribute	src/parser.y	/^typedef_attribute: {$/;"	l
typedef_attribute_core	src/parser.y	/^typedef_attribute_core:$/;"	l
typedef_type_params	parser.tab.c	/^char typedef_type_params[VAR_NAME_MAX];$/;"	v
typedef_type_params_	src/parser.y	/^typedef_type_params_: {$/;"	l
uValue	src/common.h	/^    } uValue;$/;"	m	struct:sNodeTreeStruct	typeref:union:sNodeTreeStruct::__anon4
union_	src/parser.y	/^union_: UNION IDENTIFIER '{' fields '}' ';' { char* union_name = $2;$/;"	l
unput	lex.yy.c	200;"	d	file:
value	src/compile.cpp	/^    Value* value;$/;"	m	struct:LVALUEStruct	file:
var	src/compile.cpp	/^    sVar* var;$/;"	m	struct:LVALUEStruct	file:
var_arg	parser.tab.c	/^BOOL var_arg;$/;"	v
variable_name	parser.tab.c	/^char variable_name[VAR_NAME_MAX];$/;"	v
variable_names	parser.tab.c	/^char variable_names[VAR_NAME_MAX][128];$/;"	v
xasprintf	src/memalloc-stdc.c	/^void *xasprintf(const char* msg, ...)$/;"	f
xassert	code/HelloWorld.c	/^void xassert(char* msg, bool exp) $/;"	f
xcalloc	src/xfunc.c	/^ALLOC void* xcalloc(size_t count, size_t size)$/;"	f
xmalloc	src/xfunc.c	/^ALLOC void* xmalloc(size_t size)$/;"	f
xrealloc	src/xfunc.c	/^ALLOC void* xrealloc(void* ptr, size_t size)$/;"	f
xsprintf	a.c	/^void* xsprintf(char* msg, ...)$/;"	f
xsprintf	code/HelloWorld.c	/^void*% xsprintf(char* msg, ...)$/;"	f
xsprintf	src/memalloc-stdc.c	/^void *xsprintf(char* msg, ...)$/;"	f
xstrdup	src/xfunc.c	/^ALLOC char* xstrdup(const char* str)$/;"	f
xstrncat	src/xfunc.c	/^char* xstrncat(char* des, const char* str, int size)$/;"	f
xstrncpy	src/xfunc.c	/^char* xstrncpy(char* des, const char* src, int size)$/;"	f
xxxxxxxx	code/aaa.h	/^int xxxxxxxx;$/;"	v
yy_accept	lex.yy.c	/^static const flex_int16_t yy_accept[437] =$/;"	v	file:
yy_at_bol	lex.yy.c	/^	int yy_at_bol;$/;"	m	struct:yy_buffer_state	file:
yy_base	lex.yy.c	/^static const flex_int16_t yy_base[449] =$/;"	v	file:
yy_bs_column	lex.yy.c	/^    int yy_bs_column; \/**< The column count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_bs_lineno	lex.yy.c	/^    int yy_bs_lineno; \/**< The line count. *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_pos	lex.yy.c	/^	char *yy_buf_pos;		\/* current position in input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_buf_size	lex.yy.c	/^	int yy_buf_size;$/;"	m	struct:yy_buffer_state	file:
yy_buffer_stack	lex.yy.c	/^static YY_BUFFER_STATE * yy_buffer_stack = NULL; \/**< Stack as an array. *\/$/;"	v	file:
yy_buffer_stack_max	lex.yy.c	/^static size_t yy_buffer_stack_max = 0; \/**< capacity of stack. *\/$/;"	v	file:
yy_buffer_stack_top	lex.yy.c	/^static size_t yy_buffer_stack_top = 0; \/**< index of top of stack. *\/$/;"	v	file:
yy_buffer_state	lex.yy.c	/^struct yy_buffer_state$/;"	s	file:
yy_buffer_status	lex.yy.c	/^	int yy_buffer_status;$/;"	m	struct:yy_buffer_state	file:
yy_c_buf_p	lex.yy.c	/^static char *yy_c_buf_p = NULL;$/;"	v	file:
yy_ch_buf	lex.yy.c	/^	char *yy_ch_buf;		\/* input buffer *\/$/;"	m	struct:yy_buffer_state	file:
yy_chk	lex.yy.c	/^static const flex_int16_t yy_chk[594] =$/;"	v	file:
yy_create_buffer	lex.yy.c	/^    YY_BUFFER_STATE yy_create_buffer  (FILE * file, int  size )$/;"	f
yy_def	lex.yy.c	/^static const flex_int16_t yy_def[449] =$/;"	v	file:
yy_delete_buffer	lex.yy.c	/^    void yy_delete_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_did_buffer_switch_on_eof	lex.yy.c	/^static int yy_did_buffer_switch_on_eof;$/;"	v	file:
yy_ec	lex.yy.c	/^static const YY_CHAR yy_ec[256] =$/;"	v	file:
yy_fatal_error	lex.yy.c	/^static void yynoreturn yy_fatal_error (const char* msg )$/;"	f	file:
yy_fill_buffer	lex.yy.c	/^	int yy_fill_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_flex_debug	lex.yy.c	/^int yy_flex_debug = 0;$/;"	v
yy_flex_strlen	lex.yy.c	/^static int yy_flex_strlen (const char * s )$/;"	f	file:
yy_flex_strncpy	lex.yy.c	/^static void yy_flex_strncpy (char* s1, const char * s2, int n )$/;"	f	file:
yy_flush_buffer	lex.yy.c	/^    void yy_flush_buffer (YY_BUFFER_STATE  b )$/;"	f
yy_get_next_buffer	lex.yy.c	/^static int yy_get_next_buffer (void)$/;"	f	file:
yy_get_previous_state	lex.yy.c	/^    static yy_state_type yy_get_previous_state (void)$/;"	f	file:
yy_hold_char	lex.yy.c	/^static char yy_hold_char;$/;"	v	file:
yy_init	lex.yy.c	/^static int yy_init = 0;		\/* whether we need to initialize *\/$/;"	v	file:
yy_init_buffer	lex.yy.c	/^    static void yy_init_buffer  (YY_BUFFER_STATE  b, FILE * file )$/;"	f	file:
yy_init_globals	lex.yy.c	/^static int yy_init_globals (void)$/;"	f	file:
yy_input_file	lex.yy.c	/^	FILE *yy_input_file;$/;"	m	struct:yy_buffer_state	file:
yy_is_interactive	lex.yy.c	/^	int yy_is_interactive;$/;"	m	struct:yy_buffer_state	file:
yy_is_our_buffer	lex.yy.c	/^	int yy_is_our_buffer;$/;"	m	struct:yy_buffer_state	file:
yy_last_accepting_cpos	lex.yy.c	/^static char *yy_last_accepting_cpos;$/;"	v	file:
yy_last_accepting_state	lex.yy.c	/^static yy_state_type yy_last_accepting_state;$/;"	v	file:
yy_load_buffer_state	lex.yy.c	/^static void yy_load_buffer_state  (void)$/;"	f	file:
yy_meta	lex.yy.c	/^static const YY_CHAR yy_meta[58] =$/;"	v	file:
yy_n_chars	lex.yy.c	/^	int yy_n_chars;$/;"	m	struct:yy_buffer_state	file:
yy_n_chars	lex.yy.c	/^static int yy_n_chars;		\/* number of characters read into yy_ch_buf *\/$/;"	v	file:
yy_new_buffer	lex.yy.c	322;"	d	file:
yy_nxt	lex.yy.c	/^	flex_int32_t yy_nxt;$/;"	m	struct:yy_trans_info	file:
yy_nxt	lex.yy.c	/^static const flex_int16_t yy_nxt[594] =$/;"	v	file:
yy_reduce_print	parser.tab.c	/^yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, int yyrule)$/;"	f	file:
yy_rule_can_match_eol	lex.yy.c	/^static const flex_int32_t yy_rule_can_match_eol[131] =$/;"	v	file:
yy_scan_buffer	lex.yy.c	/^YY_BUFFER_STATE yy_scan_buffer  (char * base, yy_size_t  size )$/;"	f
yy_scan_bytes	lex.yy.c	/^YY_BUFFER_STATE yy_scan_bytes  (const char * yybytes, int  _yybytes_len )$/;"	f
yy_scan_string	lex.yy.c	/^YY_BUFFER_STATE yy_scan_string (const char * yystr )$/;"	f
yy_set_bol	lex.yy.c	332;"	d	file:
yy_set_interactive	lex.yy.c	323;"	d	file:
yy_size_t	lex.yy.c	/^typedef size_t yy_size_t;$/;"	t	file:
yy_stack_print	parser.tab.c	/^yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)$/;"	f	file:
yy_start	lex.yy.c	/^static int yy_start = 0;	\/* start state number *\/$/;"	v	file:
yy_state_type	lex.yy.c	/^typedef int yy_state_type;$/;"	t	file:
yy_switch_to_buffer	lex.yy.c	/^    void yy_switch_to_buffer  (YY_BUFFER_STATE  new_buffer )$/;"	f
yy_symbol_print	parser.tab.c	/^yy_symbol_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_symbol_value_print	parser.tab.c	/^yy_symbol_value_print (FILE *yyo, int yytype, YYSTYPE const * const yyvaluep)$/;"	f	file:
yy_trans_info	lex.yy.c	/^struct yy_trans_info$/;"	s	file:
yy_try_NUL_trans	lex.yy.c	/^    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state )$/;"	f	file:
yy_verify	lex.yy.c	/^	flex_int32_t yy_verify;$/;"	m	struct:yy_trans_info	file:
yyalloc	lex.yy.c	/^void *yyalloc (yy_size_t  size )$/;"	f
yyalloc	parser.tab.c	/^union yyalloc$/;"	u	file:
yychar	parser.tab.c	/^int yychar;$/;"	v
yycheck	parser.tab.c	/^static const yytype_int16 yycheck[] =$/;"	v	file:
yyclearin	parser.tab.c	2279;"	d	file:
yyconst	lex.yy.c	97;"	d	file:
yydebug	parser.tab.c	/^int yydebug;$/;"	v
yydefact	parser.tab.c	/^static const yytype_uint16 yydefact[] =$/;"	v	file:
yydefgoto	parser.tab.c	/^static const yytype_int16 yydefgoto[] =$/;"	v	file:
yydestruct	parser.tab.c	/^yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep)$/;"	f	file:
yyensure_buffer_stack	lex.yy.c	/^static void yyensure_buffer_stack (void)$/;"	f	file:
yyerrok	parser.tab.c	2278;"	d	file:
yyerror	parser.tab.c	/^int yyerror(char *msg)$/;"	f
yyfree	lex.yy.c	/^void yyfree (void * ptr )$/;"	f
yyget_debug	lex.yy.c	/^int yyget_debug  (void)$/;"	f
yyget_in	lex.yy.c	/^FILE *yyget_in  (void)$/;"	f
yyget_leng	lex.yy.c	/^int yyget_leng  (void)$/;"	f
yyget_lineno	lex.yy.c	/^int yyget_lineno  (void)$/;"	f
yyget_out	lex.yy.c	/^FILE *yyget_out  (void)$/;"	f
yyget_text	lex.yy.c	/^char *yyget_text  (void)$/;"	f
yyin	lex.yy.c	/^FILE *yyin = NULL, *yyout = NULL;$/;"	v
yyinput	lex.yy.c	/^    static int yyinput (void)$/;"	f	file:
yyleng	lex.yy.c	/^int yyleng;$/;"	v
yyless	lex.yy.c	188;"	d	file:
yyless	lex.yy.c	2984;"	d	file:
yyless	lex.yy.c	2985;"	d	file:
yylex_destroy	lex.yy.c	/^int yylex_destroy  (void)$/;"	f
yylineno	lex.yy.c	/^int yylineno = 1;$/;"	v
yylval	parser.tab.c	/^YYSTYPE yylval;$/;"	v
yymore	lex.yy.c	743;"	d	file:
yynerrs	parser.tab.c	/^int yynerrs;$/;"	v
yynoreturn	lex.yy.c	100;"	d	file:
yynoreturn	lex.yy.c	102;"	d	file:
yyout	lex.yy.c	/^FILE *yyin = NULL, *yyout = NULL;$/;"	v
yypact	parser.tab.c	/^static const yytype_int16 yypact[] =$/;"	v	file:
yypact_value_is_default	parser.tab.c	663;"	d	file:
yyparse	parser.tab.c	/^yyparse (void)$/;"	f
yypgoto	parser.tab.c	/^static const yytype_int16 yypgoto[] =$/;"	v	file:
yypop_buffer_state	lex.yy.c	/^void yypop_buffer_state (void)$/;"	f
yypush_buffer_state	lex.yy.c	/^void yypush_buffer_state (YY_BUFFER_STATE new_buffer )$/;"	f
yyr1	parser.tab.c	/^static const yytype_uint8 yyr1[] =$/;"	v	file:
yyr2	parser.tab.c	/^static const yytype_uint8 yyr2[] =$/;"	v	file:
yyrealloc	lex.yy.c	/^void *yyrealloc  (void * ptr, yy_size_t  size )$/;"	f
yyrestart	lex.yy.c	/^    void yyrestart  (FILE * input_file )$/;"	f
yyrline	parser.tab.c	/^static const yytype_uint16 yyrline[] =$/;"	v	file:
yyset_debug	lex.yy.c	/^void yyset_debug (int  _bdebug )$/;"	f
yyset_in	lex.yy.c	/^void yyset_in (FILE *  _in_str )$/;"	f
yyset_lineno	lex.yy.c	/^void yyset_lineno (int  _line_number )$/;"	f
yyset_out	lex.yy.c	/^void yyset_out (FILE *  _out_str )$/;"	f
yyss_alloc	parser.tab.c	/^  yytype_int16 yyss_alloc;$/;"	m	union:yyalloc	file:
yystos	parser.tab.c	/^static const yytype_uint8 yystos[] =$/;"	v	file:
yystpcpy	parser.tab.c	/^yystpcpy (char *yydest, const char *yysrc)$/;"	f	file:
yystpcpy	parser.tab.c	2480;"	d	file:
yystrlen	parser.tab.c	/^yystrlen (const char *yystr)$/;"	f	file:
yystrlen	parser.tab.c	2464;"	d	file:
yysyntax_error	parser.tab.c	/^yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,$/;"	f	file:
yytable	parser.tab.c	/^static const yytype_int16 yytable[] =$/;"	v	file:
yytable_value_is_error	parser.tab.c	668;"	d	file:
yyterminate	lex.yy.c	937;"	d	file:
yytext	lex.yy.c	/^char *yytext;$/;"	v
yytext_ptr	lex.yy.c	355;"	d	file:
yytext_ptr	lex.yy.c	357;"	d	file:
yytname	parser.tab.c	/^static const char *const yytname[] =$/;"	v	file:
yytnamerr	parser.tab.c	/^yytnamerr (char *yyres, const char *yystr)$/;"	f	file:
yytokentype	parser.tab.c	/^  enum yytokentype$/;"	g	file:
yytokentype	parser.tab.h	/^  enum yytokentype$/;"	g
yytoknum	parser.tab.c	/^static const yytype_uint16 yytoknum[] =$/;"	v	file:
yytranslate	parser.tab.c	/^static const yytype_uint8 yytranslate[] =$/;"	v	file:
yytype_int16	parser.tab.c	/^typedef YYTYPE_INT16 yytype_int16;$/;"	t	file:
yytype_int16	parser.tab.c	/^typedef short yytype_int16;$/;"	t	file:
yytype_int8	parser.tab.c	/^typedef YYTYPE_INT8 yytype_int8;$/;"	t	file:
yytype_int8	parser.tab.c	/^typedef signed char yytype_int8;$/;"	t	file:
yytype_uint16	parser.tab.c	/^typedef YYTYPE_UINT16 yytype_uint16;$/;"	t	file:
yytype_uint16	parser.tab.c	/^typedef unsigned short yytype_uint16;$/;"	t	file:
yytype_uint8	parser.tab.c	/^typedef YYTYPE_UINT8 yytype_uint8;$/;"	t	file:
yytype_uint8	parser.tab.c	/^typedef unsigned char yytype_uint8;$/;"	t	file:
yyunput	lex.yy.c	/^    static void yyunput (int c, char * yy_bp )$/;"	f	file:
yyvs_alloc	parser.tab.c	/^  YYSTYPE yyvs_alloc;$/;"	m	union:yyalloc	file:
yyyyyyyy	code/aaa.h	/^int yyyyyyyy;$/;"	v
